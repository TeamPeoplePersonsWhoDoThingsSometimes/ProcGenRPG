using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class Area {

    //TODO: Add booleans representing whether or not this Area has been generated, is being shown, or is
        //currently being generated by a thread. (Also have a refence to the thread, to kill it, if need be.)

    //TODO: Add a 2d array of Tiles, which will be this Area.

    //TODO: This Area will also need references to all of the enemies and objects in this Area. To kill them.

    //TODO: Multithreaded Area generation, when the player is in an adjacent Area. To reduce load times.

    //TODO: Create a function that randomly assigns a quest to one of its Rooms.
    
    //Plans: To generate the Area, first generate the rooms, and place them into the 2d tile array.
                //Then, genereate a 2d array of int values, which will function as weights.
                //While all rooms are not connected.
                    //Use an A* algorithm to create corridors from Room to Room.
                //Once all rooms are connected, generate decorations/enemies/Quest material in each room.

    //Areas which this Area is connected to. True, if connected to an area in that direction.
    public bool north;
    public bool east;
    public bool south;
    public bool west;

    //This area's position on the map.
    public Point position
    {
        get;
        private set;
    }

    AreaGroup group;

    private List<Room> rooms; //The rooms which this Area contains.

    public Area(Point position, bool N, bool E, bool S, bool W)
    {
        this.position = position;

        north = N;
        east = E;
        south = S;
        west = W;

        rooms = new List<Room>();
    }

    //Returns the neighbors connected to this Area.
    public Area[] getNeighbors()
    {
        //TODO: Implement this method.
        return null;
    }

    //Generates the information needed to show this area.
    public void generateArea()
    {
        //TODO: Implement this method.

        //Should create a 2D array of some Object, probably a tile object.

        //Will have a switch statement, determining which tileset to use. Possibly which mapGenerator to use, if we
            //want to have Area's generated differently.
    }

    public void showArea()
    {
        //TODO: Implement this method.

        //Should take the 2D array generated by the generateArea method, create gameObjects out of them,
            //and display them to the player.

        //Probably should keep a list of these gameObjects, so that they may be destroyed.

        //Will have a switch statement determining which tileset to use for the gameObjects.
    }

    public void hideArea()
    {
        //Should (Destroy or hide? Make a separate function for destroying?) all gameObjects 
        //that were generated by this Area.
    }

    public void releaseData()
    {
        //Should null the 2D arrays of information, so that they may be garbage collected.
        //Prevents running out of RAM.
    }
}
