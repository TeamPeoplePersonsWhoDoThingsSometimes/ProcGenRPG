// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class QuestProtobuf {

  #region Extension registration
  public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
  }
  #endregion
  #region Static variables
  internal static pbd::MessageDescriptor internal__static_QuestPackage__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::QuestPackage, global::QuestPackage.Builder> internal__static_QuestPackage__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_BuilderPackage__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::BuilderPackage, global::BuilderPackage.Builder> internal__static_BuilderPackage__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_QuestProtocol__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::QuestProtocol, global::QuestProtocol.Builder> internal__static_QuestProtocol__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_StatusBlockProtocol__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::StatusBlockProtocol, global::StatusBlockProtocol.Builder> internal__static_StatusBlockProtocol__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_SpawnCommandProtocol__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::SpawnCommandProtocol, global::SpawnCommandProtocol.Builder> internal__static_SpawnCommandProtocol__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_StatusStepProtocol__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::StatusStepProtocol, global::StatusStepProtocol.Builder> internal__static_StatusStepProtocol__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_StatusCheckableProtocol__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::StatusCheckableProtocol, global::StatusCheckableProtocol.Builder> internal__static_StatusCheckableProtocol__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_TierProtocol__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::TierProtocol, global::TierProtocol.Builder> internal__static_TierProtocol__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ActionProtocol__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ActionProtocol, global::ActionProtocol.Builder> internal__static_ActionProtocol__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_DirectObjectProtocol__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::DirectObjectProtocol, global::DirectObjectProtocol.Builder> internal__static_DirectObjectProtocol__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_MapProtocol__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::MapProtocol, global::MapProtocol.Builder> internal__static_MapProtocol__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ItemProtocol__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ItemProtocol, global::ItemProtocol.Builder> internal__static_ItemProtocol__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ConversationPackage__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ConversationPackage, global::ConversationPackage.Builder> internal__static_ConversationPackage__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_Conversation__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::Conversation, global::Conversation.Builder> internal__static_Conversation__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ConversationNode__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ConversationNode, global::ConversationNode.Builder> internal__static_ConversationNode__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_Connection__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::Connection, global::Connection.Builder> internal__static_Connection__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_RequirementSet__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::RequirementSet, global::RequirementSet.Builder> internal__static_RequirementSet__FieldAccessorTable;
  #endregion
  #region Descriptor
  public static pbd::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbd::FileDescriptor descriptor;
  
  static QuestProtobuf() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        "ChNRdWVzdFByb3RvYnVmLnByb3RvIi4KDFF1ZXN0UGFja2FnZRIeCgZxdWVz" + 
        "dHMYASADKAsyDi5RdWVzdFByb3RvY29sIoYBCg5CdWlsZGVyUGFja2FnZRIm" + 
        "CgdlbmVtaWVzGAEgAygLMhUuRGlyZWN0T2JqZWN0UHJvdG9jb2wSJgoHd2Vh" + 
        "cG9ucxgCIAMoCzIVLkRpcmVjdE9iamVjdFByb3RvY29sEiQKBWhhY2tzGAMg" + 
        "AygLMhUuRGlyZWN0T2JqZWN0UHJvdG9jb2wiaQoNUXVlc3RQcm90b2NvbBIM" + 
        "CgRuYW1lGAEgAigJEg8KB2NyZWF0b3IYAyABKAkSIgoFc3RlcHMYAiADKAsy" + 
        "Ey5TdGF0dXNTdGVwUHJvdG9jb2wSFQoFYmlvbWUYBCABKA4yBi5CaW9tZSJ4" + 
        "ChNTdGF0dXNCbG9ja1Byb3RvY29sEgwKBG5hbWUYASACKAkSKgoIc3RhdHVz" + 
        "ZXMYAiADKAsyGC5TdGF0dXNDaGVja2FibGVQcm90b2NvbBInCghjb21tYW5k" + 
        "cxgDIAMoCzIVLlNwYXduQ29tbWFuZFByb3RvY29sIsYBChRTcGF3bkNvbW1h" + 
        "bmRQcm90b2NvbBIbCglzcGF3bkFyZWEYASACKA4yCC5NYXBUeXBlEjcKEnNw" + 
        "YXduU3BlY2lmaWNhdGlvbhgCIAIoDjIbLlNwYXduQXJlYVR5cGVTcGVjaWZp" + 
        "Y2F0aW9uEg0KBXJhbmdlGAMgAigFEiMKBGl0ZW0YBSABKAsyFS5EaXJlY3RP" + 
        "YmplY3RQcm90b2NvbBIkCgVlbmVteRgGIAEoCzIVLkRpcmVjdE9iamVjdFBy" + 
        "b3RvY29sIpIBChJTdGF0dXNTdGVwUHJvdG9jb2wSDAoEbmFtZRgBIAIoCRIT" + 
        "CgtkZXNjcmlwdGlvbhgCIAIoCRIwCg5zdGF0dXNlc0luU3RlcBgDIAMoCzIY" + 
        "LlN0YXR1c0NoZWNrYWJsZVByb3RvY29sEicKCGNvbW1hbmRzGAQgAygLMhUu" + 
        "U3Bhd25Db21tYW5kUHJvdG9jb2wiZwoXU3RhdHVzQ2hlY2thYmxlUHJvdG9j" + 
        "b2wSHwoGYWN0aW9uGAEgASgLMg8uQWN0aW9uUHJvdG9jb2wSGwoEdGllchgC" + 
        "IAEoCzINLlRpZXJQcm90b2NvbBIOCgZhbW91bnQYAyABKAUiHAoMVGllclBy" + 
        "b3RvY29sEgwKBHRpZXIYASACKAUiUgoOQWN0aW9uUHJvdG9jb2wSGQoEdHlw" + 
        "ZRgBIAIoDjILLkFjdGlvblR5cGUSJQoGdGFyZ2V0GAIgASgLMhUuRGlyZWN0" + 
        "T2JqZWN0UHJvdG9jb2wihQEKFERpcmVjdE9iamVjdFByb3RvY29sEgwKBHR5" + 
        "cGUYASABKAkSDAoEbmFtZRgCIAIoCRIZCgNtYXAYAyABKAsyDC5NYXBQcm90" + 
        "b2NvbBIOCgZhbW91bnQYBCABKAUSJgoPaXRlbUluZm9ybWF0aW9uGAUgASgL" + 
        "Mg0uSXRlbVByb3RvY29sIkMKC01hcFByb3RvY29sEgsKA3VpZBgBIAIoAxIY" + 
        "ChBnZW5lcmF0ZUlmTmVlZGVkGAIgAigIEg0KBXJhbmdlGAMgAigBIkcKDEl0" + 
        "ZW1Qcm90b2NvbBIPCgd2ZXJzaW9uGAEgAigFEiYKCWxldmVsU3BlYxgCIAIo" + 
        "DjITLkxldmVsU3BlY2lmaWNhdGlvbiI7ChNDb252ZXJzYXRpb25QYWNrYWdl" + 
        "EiQKDWNvbnZlcnNhdGlvbnMYASADKAsyDS5Db252ZXJzYXRpb24iUgoMQ29u" + 
        "dmVyc2F0aW9uEiMKCGFsbE5vZGVzGAEgAygLMhEuQ29udmVyc2F0aW9uTm9k" + 
        "ZRIMCgRuYW1lGAIgASgJEg8KB2NyZWF0b3IYAyABKAkimQEKEENvbnZlcnNh" + 
        "dGlvbk5vZGUSDAoEdGV4dBgBIAIoCRIMCgRuYW1lGAIgAigJEgsKA3VpZBgD" + 
        "IAIoAxIJCgFYGAQgAigFEgkKAVkYBSACKAUSIAoLY29ubmVjdGlvbnMYBiAD" + 
        "KAsyCy5Db25uZWN0aW9uEiQKBmJsb2NrcxgHIAMoCzIULlN0YXR1c0Jsb2Nr" + 
        "UHJvdG9jb2wiVAoKQ29ubmVjdGlvbhIOCgZub2RlSWQYASACKAMSDAoEdGV4" + 
        "dBgCIAIoCRIoCg9yZXF1aXJlbWVudFNldHMYAyADKAsyDy5SZXF1aXJlbWVu" + 
        "dFNldCJACg5SZXF1aXJlbWVudFNldBIuCgxyZXF1aXJlbWVudHMYASADKAsy" + 
        "GC5TdGF0dXNDaGVja2FibGVQcm90b2NvbCqlAQoKQWN0aW9uVHlwZRIICgRL" + 
        "SUxMEAASDQoJTU9WRV9BUkVBEAESFQoRQVBQUk9BQ0hFRF9PQkpFQ1QQAhIU" + 
        "ChBQSUNLRURfVVBfT0JKRUNUEAMSDAoITEVWRUxfVVAQBRIOCgpFUVVJUF9J" + 
        "VEVNEAYSDAoIVVNFX0lURU0QBxIKCgZBVFRBQ0sQCBIZChVDT05WRVJTQVRJ" + 
        "T05fTk9ERV9ISVQQCSokCgVCaW9tZRIKCgZQWVRIT04QABIFCgFDEAESCAoE" + 
        "SFRNTBACKioKB01hcFR5cGUSCAoEQ0lUWRAAEggKBFBBVEgQARILCgdEVU5H" + 
        "RU9OEAIqNQoaU3Bhd25BcmVhVHlwZVNwZWNpZmljYXRpb24SCQoFTE9DQUwQ" + 
        "ABIMCghESVNUQU5DRRABKiwKEkxldmVsU3BlY2lmaWNhdGlvbhILCgdNSU5J" + 
        "TVVNEAESCQoFRVhBQ1QQAkIhCh9zdHNxdWVzdGJ1aWxkZXIucHJvdG9jb2xi" + 
        "dWZmZXJz");
    pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
      descriptor = root;
      internal__static_QuestPackage__Descriptor = Descriptor.MessageTypes[0];
      internal__static_QuestPackage__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::QuestPackage, global::QuestPackage.Builder>(internal__static_QuestPackage__Descriptor,
              new string[] { "Quests", });
      internal__static_BuilderPackage__Descriptor = Descriptor.MessageTypes[1];
      internal__static_BuilderPackage__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::BuilderPackage, global::BuilderPackage.Builder>(internal__static_BuilderPackage__Descriptor,
              new string[] { "Enemies", "Weapons", "Hacks", });
      internal__static_QuestProtocol__Descriptor = Descriptor.MessageTypes[2];
      internal__static_QuestProtocol__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::QuestProtocol, global::QuestProtocol.Builder>(internal__static_QuestProtocol__Descriptor,
              new string[] { "Name", "Creator", "Steps", "Biome", });
      internal__static_StatusBlockProtocol__Descriptor = Descriptor.MessageTypes[3];
      internal__static_StatusBlockProtocol__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::StatusBlockProtocol, global::StatusBlockProtocol.Builder>(internal__static_StatusBlockProtocol__Descriptor,
              new string[] { "Name", "Statuses", "Commands", });
      internal__static_SpawnCommandProtocol__Descriptor = Descriptor.MessageTypes[4];
      internal__static_SpawnCommandProtocol__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::SpawnCommandProtocol, global::SpawnCommandProtocol.Builder>(internal__static_SpawnCommandProtocol__Descriptor,
              new string[] { "SpawnArea", "SpawnSpecification", "Range", "Item", "Enemy", });
      internal__static_StatusStepProtocol__Descriptor = Descriptor.MessageTypes[5];
      internal__static_StatusStepProtocol__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::StatusStepProtocol, global::StatusStepProtocol.Builder>(internal__static_StatusStepProtocol__Descriptor,
              new string[] { "Name", "Description", "StatusesInStep", "Commands", });
      internal__static_StatusCheckableProtocol__Descriptor = Descriptor.MessageTypes[6];
      internal__static_StatusCheckableProtocol__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::StatusCheckableProtocol, global::StatusCheckableProtocol.Builder>(internal__static_StatusCheckableProtocol__Descriptor,
              new string[] { "Action", "Tier", "Amount", });
      internal__static_TierProtocol__Descriptor = Descriptor.MessageTypes[7];
      internal__static_TierProtocol__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::TierProtocol, global::TierProtocol.Builder>(internal__static_TierProtocol__Descriptor,
              new string[] { "Tier", });
      internal__static_ActionProtocol__Descriptor = Descriptor.MessageTypes[8];
      internal__static_ActionProtocol__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ActionProtocol, global::ActionProtocol.Builder>(internal__static_ActionProtocol__Descriptor,
              new string[] { "Type", "Target", });
      internal__static_DirectObjectProtocol__Descriptor = Descriptor.MessageTypes[9];
      internal__static_DirectObjectProtocol__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::DirectObjectProtocol, global::DirectObjectProtocol.Builder>(internal__static_DirectObjectProtocol__Descriptor,
              new string[] { "Type", "Name", "Map", "Amount", "ItemInformation", });
      internal__static_MapProtocol__Descriptor = Descriptor.MessageTypes[10];
      internal__static_MapProtocol__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::MapProtocol, global::MapProtocol.Builder>(internal__static_MapProtocol__Descriptor,
              new string[] { "Uid", "GenerateIfNeeded", "Range", });
      internal__static_ItemProtocol__Descriptor = Descriptor.MessageTypes[11];
      internal__static_ItemProtocol__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ItemProtocol, global::ItemProtocol.Builder>(internal__static_ItemProtocol__Descriptor,
              new string[] { "Version", "LevelSpec", });
      internal__static_ConversationPackage__Descriptor = Descriptor.MessageTypes[12];
      internal__static_ConversationPackage__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ConversationPackage, global::ConversationPackage.Builder>(internal__static_ConversationPackage__Descriptor,
              new string[] { "Conversations", });
      internal__static_Conversation__Descriptor = Descriptor.MessageTypes[13];
      internal__static_Conversation__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::Conversation, global::Conversation.Builder>(internal__static_Conversation__Descriptor,
              new string[] { "AllNodes", "Name", "Creator", });
      internal__static_ConversationNode__Descriptor = Descriptor.MessageTypes[14];
      internal__static_ConversationNode__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ConversationNode, global::ConversationNode.Builder>(internal__static_ConversationNode__Descriptor,
              new string[] { "Text", "Name", "Uid", "X", "Y", "Connections", "Blocks", });
      internal__static_Connection__Descriptor = Descriptor.MessageTypes[15];
      internal__static_Connection__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::Connection, global::Connection.Builder>(internal__static_Connection__Descriptor,
              new string[] { "NodeId", "Text", "RequirementSets", });
      internal__static_RequirementSet__Descriptor = Descriptor.MessageTypes[16];
      internal__static_RequirementSet__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::RequirementSet, global::RequirementSet.Builder>(internal__static_RequirementSet__Descriptor,
              new string[] { "Requirements", });
      return null;
    };
    pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
        new pbd::FileDescriptor[] {
        }, assigner);
  }
  #endregion
  
}
#region Enums
public enum ActionType {
  KILL = 0,
  MOVE_AREA = 1,
  APPROACHED_OBJECT = 2,
  PICKED_UP_OBJECT = 3,
  LEVEL_UP = 5,
  EQUIP_ITEM = 6,
  USE_ITEM = 7,
  ATTACK = 8,
  CONVERSATION_NODE_HIT = 9,
}

public enum Biome {
  NOT_ASSIGNED = 0,
  PYTHON = 1,
  C = 2,
  HTML = 3,
}

public enum MapType {
  CITY = 0,
  PATH = 1,
  DUNGEON = 2,
}

public enum SpawnAreaTypeSpecification {
  LOCAL = 0,
  DISTANCE = 1,
}

public enum LevelSpecification {
  MINIMUM = 1,
  EXACT = 2,
}

#endregion

#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class QuestPackage : pb::GeneratedMessage<QuestPackage, QuestPackage.Builder> {
  private QuestPackage() { }
  private static readonly QuestPackage defaultInstance = new QuestPackage().MakeReadOnly();
  private static readonly string[] _questPackageFieldNames = new string[] { "quests" };
  private static readonly uint[] _questPackageFieldTags = new uint[] { 10 };
  public static QuestPackage DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override QuestPackage DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override QuestPackage ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::QuestProtobuf.internal__static_QuestPackage__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<QuestPackage, QuestPackage.Builder> InternalFieldAccessors {
    get { return global::QuestProtobuf.internal__static_QuestPackage__FieldAccessorTable; }
  }
  
  public const int QuestsFieldNumber = 1;
  private pbc::PopsicleList<global::QuestProtocol> quests_ = new pbc::PopsicleList<global::QuestProtocol>();
  public scg::IList<global::QuestProtocol> QuestsList {
    get { return quests_; }
  }
  public int QuestsCount {
    get { return quests_.Count; }
  }
  public global::QuestProtocol GetQuests(int index) {
    return quests_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::QuestProtocol element in QuestsList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _questPackageFieldNames;
    if (quests_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], quests_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::QuestProtocol element in QuestsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static QuestPackage ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static QuestPackage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static QuestPackage ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static QuestPackage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static QuestPackage ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static QuestPackage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static QuestPackage ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static QuestPackage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static QuestPackage ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static QuestPackage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private QuestPackage MakeReadOnly() {
    quests_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(QuestPackage prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<QuestPackage, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(QuestPackage cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private QuestPackage result;
    
    private QuestPackage PrepareBuilder() {
      if (resultIsReadOnly) {
        QuestPackage original = result;
        result = new QuestPackage();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override QuestPackage MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::QuestPackage.Descriptor; }
    }
    
    public override QuestPackage DefaultInstanceForType {
      get { return global::QuestPackage.DefaultInstance; }
    }
    
    public override QuestPackage BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is QuestPackage) {
        return MergeFrom((QuestPackage) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(QuestPackage other) {
      if (other == global::QuestPackage.DefaultInstance) return this;
      PrepareBuilder();
      if (other.quests_.Count != 0) {
        result.quests_.Add(other.quests_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_questPackageFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _questPackageFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.quests_, global::QuestProtocol.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::QuestProtocol> QuestsList {
      get { return PrepareBuilder().quests_; }
    }
    public int QuestsCount {
      get { return result.QuestsCount; }
    }
    public global::QuestProtocol GetQuests(int index) {
      return result.GetQuests(index);
    }
    public Builder SetQuests(int index, global::QuestProtocol value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.quests_[index] = value;
      return this;
    }
    public Builder SetQuests(int index, global::QuestProtocol.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.quests_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddQuests(global::QuestProtocol value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.quests_.Add(value);
      return this;
    }
    public Builder AddQuests(global::QuestProtocol.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.quests_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeQuests(scg::IEnumerable<global::QuestProtocol> values) {
      PrepareBuilder();
      result.quests_.Add(values);
      return this;
    }
    public Builder ClearQuests() {
      PrepareBuilder();
      result.quests_.Clear();
      return this;
    }
  }
  static QuestPackage() {
    object.ReferenceEquals(global::QuestProtobuf.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class BuilderPackage : pb::GeneratedMessage<BuilderPackage, BuilderPackage.Builder> {
  private BuilderPackage() { }
  private static readonly BuilderPackage defaultInstance = new BuilderPackage().MakeReadOnly();
  private static readonly string[] _builderPackageFieldNames = new string[] { "enemies", "hacks", "weapons" };
  private static readonly uint[] _builderPackageFieldTags = new uint[] { 10, 26, 18 };
  public static BuilderPackage DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override BuilderPackage DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override BuilderPackage ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::QuestProtobuf.internal__static_BuilderPackage__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<BuilderPackage, BuilderPackage.Builder> InternalFieldAccessors {
    get { return global::QuestProtobuf.internal__static_BuilderPackage__FieldAccessorTable; }
  }
  
  public const int EnemiesFieldNumber = 1;
  private pbc::PopsicleList<global::DirectObjectProtocol> enemies_ = new pbc::PopsicleList<global::DirectObjectProtocol>();
  public scg::IList<global::DirectObjectProtocol> EnemiesList {
    get { return enemies_; }
  }
  public int EnemiesCount {
    get { return enemies_.Count; }
  }
  public global::DirectObjectProtocol GetEnemies(int index) {
    return enemies_[index];
  }
  
  public const int WeaponsFieldNumber = 2;
  private pbc::PopsicleList<global::DirectObjectProtocol> weapons_ = new pbc::PopsicleList<global::DirectObjectProtocol>();
  public scg::IList<global::DirectObjectProtocol> WeaponsList {
    get { return weapons_; }
  }
  public int WeaponsCount {
    get { return weapons_.Count; }
  }
  public global::DirectObjectProtocol GetWeapons(int index) {
    return weapons_[index];
  }
  
  public const int HacksFieldNumber = 3;
  private pbc::PopsicleList<global::DirectObjectProtocol> hacks_ = new pbc::PopsicleList<global::DirectObjectProtocol>();
  public scg::IList<global::DirectObjectProtocol> HacksList {
    get { return hacks_; }
  }
  public int HacksCount {
    get { return hacks_.Count; }
  }
  public global::DirectObjectProtocol GetHacks(int index) {
    return hacks_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::DirectObjectProtocol element in EnemiesList) {
        if (!element.IsInitialized) return false;
      }
      foreach (global::DirectObjectProtocol element in WeaponsList) {
        if (!element.IsInitialized) return false;
      }
      foreach (global::DirectObjectProtocol element in HacksList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _builderPackageFieldNames;
    if (enemies_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], enemies_);
    }
    if (weapons_.Count > 0) {
      output.WriteMessageArray(2, field_names[2], weapons_);
    }
    if (hacks_.Count > 0) {
      output.WriteMessageArray(3, field_names[1], hacks_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::DirectObjectProtocol element in EnemiesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      foreach (global::DirectObjectProtocol element in WeaponsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      foreach (global::DirectObjectProtocol element in HacksList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static BuilderPackage ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static BuilderPackage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static BuilderPackage ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static BuilderPackage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static BuilderPackage ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static BuilderPackage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static BuilderPackage ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static BuilderPackage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static BuilderPackage ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static BuilderPackage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private BuilderPackage MakeReadOnly() {
    enemies_.MakeReadOnly();
    weapons_.MakeReadOnly();
    hacks_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(BuilderPackage prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<BuilderPackage, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(BuilderPackage cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private BuilderPackage result;
    
    private BuilderPackage PrepareBuilder() {
      if (resultIsReadOnly) {
        BuilderPackage original = result;
        result = new BuilderPackage();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override BuilderPackage MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::BuilderPackage.Descriptor; }
    }
    
    public override BuilderPackage DefaultInstanceForType {
      get { return global::BuilderPackage.DefaultInstance; }
    }
    
    public override BuilderPackage BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is BuilderPackage) {
        return MergeFrom((BuilderPackage) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(BuilderPackage other) {
      if (other == global::BuilderPackage.DefaultInstance) return this;
      PrepareBuilder();
      if (other.enemies_.Count != 0) {
        result.enemies_.Add(other.enemies_);
      }
      if (other.weapons_.Count != 0) {
        result.weapons_.Add(other.weapons_);
      }
      if (other.hacks_.Count != 0) {
        result.hacks_.Add(other.hacks_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_builderPackageFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _builderPackageFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.enemies_, global::DirectObjectProtocol.DefaultInstance, extensionRegistry);
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.weapons_, global::DirectObjectProtocol.DefaultInstance, extensionRegistry);
            break;
          }
          case 26: {
            input.ReadMessageArray(tag, field_name, result.hacks_, global::DirectObjectProtocol.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::DirectObjectProtocol> EnemiesList {
      get { return PrepareBuilder().enemies_; }
    }
    public int EnemiesCount {
      get { return result.EnemiesCount; }
    }
    public global::DirectObjectProtocol GetEnemies(int index) {
      return result.GetEnemies(index);
    }
    public Builder SetEnemies(int index, global::DirectObjectProtocol value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.enemies_[index] = value;
      return this;
    }
    public Builder SetEnemies(int index, global::DirectObjectProtocol.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.enemies_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddEnemies(global::DirectObjectProtocol value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.enemies_.Add(value);
      return this;
    }
    public Builder AddEnemies(global::DirectObjectProtocol.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.enemies_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeEnemies(scg::IEnumerable<global::DirectObjectProtocol> values) {
      PrepareBuilder();
      result.enemies_.Add(values);
      return this;
    }
    public Builder ClearEnemies() {
      PrepareBuilder();
      result.enemies_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<global::DirectObjectProtocol> WeaponsList {
      get { return PrepareBuilder().weapons_; }
    }
    public int WeaponsCount {
      get { return result.WeaponsCount; }
    }
    public global::DirectObjectProtocol GetWeapons(int index) {
      return result.GetWeapons(index);
    }
    public Builder SetWeapons(int index, global::DirectObjectProtocol value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.weapons_[index] = value;
      return this;
    }
    public Builder SetWeapons(int index, global::DirectObjectProtocol.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.weapons_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddWeapons(global::DirectObjectProtocol value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.weapons_.Add(value);
      return this;
    }
    public Builder AddWeapons(global::DirectObjectProtocol.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.weapons_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeWeapons(scg::IEnumerable<global::DirectObjectProtocol> values) {
      PrepareBuilder();
      result.weapons_.Add(values);
      return this;
    }
    public Builder ClearWeapons() {
      PrepareBuilder();
      result.weapons_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<global::DirectObjectProtocol> HacksList {
      get { return PrepareBuilder().hacks_; }
    }
    public int HacksCount {
      get { return result.HacksCount; }
    }
    public global::DirectObjectProtocol GetHacks(int index) {
      return result.GetHacks(index);
    }
    public Builder SetHacks(int index, global::DirectObjectProtocol value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hacks_[index] = value;
      return this;
    }
    public Builder SetHacks(int index, global::DirectObjectProtocol.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hacks_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddHacks(global::DirectObjectProtocol value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hacks_.Add(value);
      return this;
    }
    public Builder AddHacks(global::DirectObjectProtocol.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hacks_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeHacks(scg::IEnumerable<global::DirectObjectProtocol> values) {
      PrepareBuilder();
      result.hacks_.Add(values);
      return this;
    }
    public Builder ClearHacks() {
      PrepareBuilder();
      result.hacks_.Clear();
      return this;
    }
  }
  static BuilderPackage() {
    object.ReferenceEquals(global::QuestProtobuf.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class QuestProtocol : pb::GeneratedMessage<QuestProtocol, QuestProtocol.Builder> {
  private QuestProtocol() { }
  private static readonly QuestProtocol defaultInstance = new QuestProtocol().MakeReadOnly();
  private static readonly string[] _questProtocolFieldNames = new string[] { "biome", "creator", "name", "steps" };
  private static readonly uint[] _questProtocolFieldTags = new uint[] { 32, 26, 10, 18 };
  public static QuestProtocol DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override QuestProtocol DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override QuestProtocol ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::QuestProtobuf.internal__static_QuestProtocol__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<QuestProtocol, QuestProtocol.Builder> InternalFieldAccessors {
    get { return global::QuestProtobuf.internal__static_QuestProtocol__FieldAccessorTable; }
  }
  
  public const int NameFieldNumber = 1;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int CreatorFieldNumber = 3;
  private bool hasCreator;
  private string creator_ = "";
  public bool HasCreator {
    get { return hasCreator; }
  }
  public string Creator {
    get { return creator_; }
  }
  
  public const int StepsFieldNumber = 2;
  private pbc::PopsicleList<global::StatusStepProtocol> steps_ = new pbc::PopsicleList<global::StatusStepProtocol>();
  public scg::IList<global::StatusStepProtocol> StepsList {
    get { return steps_; }
  }
  public int StepsCount {
    get { return steps_.Count; }
  }
  public global::StatusStepProtocol GetSteps(int index) {
    return steps_[index];
  }
  
  public const int BiomeFieldNumber = 4;
  private bool hasBiome;
  private global::Biome biome_ = global::Biome.PYTHON;
  public bool HasBiome {
    get { return hasBiome; }
  }
  public global::Biome Biome {
    get { return biome_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasName) return false;
      foreach (global::StatusStepProtocol element in StepsList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _questProtocolFieldNames;
    if (hasName) {
      output.WriteString(1, field_names[2], Name);
    }
    if (steps_.Count > 0) {
      output.WriteMessageArray(2, field_names[3], steps_);
    }
    if (hasCreator) {
      output.WriteString(3, field_names[1], Creator);
    }
    if (hasBiome) {
      output.WriteEnum(4, field_names[0], (int) Biome, Biome);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Name);
      }
      if (hasCreator) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Creator);
      }
      foreach (global::StatusStepProtocol element in StepsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      if (hasBiome) {
        size += pb::CodedOutputStream.ComputeEnumSize(4, (int) Biome);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static QuestProtocol ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static QuestProtocol ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static QuestProtocol ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static QuestProtocol ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static QuestProtocol ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static QuestProtocol ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static QuestProtocol ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static QuestProtocol ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static QuestProtocol ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static QuestProtocol ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private QuestProtocol MakeReadOnly() {
    steps_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(QuestProtocol prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<QuestProtocol, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(QuestProtocol cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private QuestProtocol result;
    
    private QuestProtocol PrepareBuilder() {
      if (resultIsReadOnly) {
        QuestProtocol original = result;
        result = new QuestProtocol();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override QuestProtocol MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::QuestProtocol.Descriptor; }
    }
    
    public override QuestProtocol DefaultInstanceForType {
      get { return global::QuestProtocol.DefaultInstance; }
    }
    
    public override QuestProtocol BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is QuestProtocol) {
        return MergeFrom((QuestProtocol) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(QuestProtocol other) {
      if (other == global::QuestProtocol.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasCreator) {
        Creator = other.Creator;
      }
      if (other.steps_.Count != 0) {
        result.steps_.Add(other.steps_);
      }
      if (other.HasBiome) {
        Biome = other.Biome;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_questProtocolFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _questProtocolFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.steps_, global::StatusStepProtocol.DefaultInstance, extensionRegistry);
            break;
          }
          case 26: {
            result.hasCreator = input.ReadString(ref result.creator_);
            break;
          }
          case 32: {
            object unknown;
            if(input.ReadEnum(ref result.biome_, out unknown)) {
              result.hasBiome = true;
            } else if(unknown is int) {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              unknownFields.MergeVarintField(4, (ulong)(int)unknown);
            }
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasCreator {
      get { return result.hasCreator; }
    }
    public string Creator {
      get { return result.Creator; }
      set { SetCreator(value); }
    }
    public Builder SetCreator(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCreator = true;
      result.creator_ = value;
      return this;
    }
    public Builder ClearCreator() {
      PrepareBuilder();
      result.hasCreator = false;
      result.creator_ = "";
      return this;
    }
    
    public pbc::IPopsicleList<global::StatusStepProtocol> StepsList {
      get { return PrepareBuilder().steps_; }
    }
    public int StepsCount {
      get { return result.StepsCount; }
    }
    public global::StatusStepProtocol GetSteps(int index) {
      return result.GetSteps(index);
    }
    public Builder SetSteps(int index, global::StatusStepProtocol value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.steps_[index] = value;
      return this;
    }
    public Builder SetSteps(int index, global::StatusStepProtocol.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.steps_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddSteps(global::StatusStepProtocol value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.steps_.Add(value);
      return this;
    }
    public Builder AddSteps(global::StatusStepProtocol.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.steps_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeSteps(scg::IEnumerable<global::StatusStepProtocol> values) {
      PrepareBuilder();
      result.steps_.Add(values);
      return this;
    }
    public Builder ClearSteps() {
      PrepareBuilder();
      result.steps_.Clear();
      return this;
    }
    
    public bool HasBiome {
     get { return result.hasBiome; }
    }
    public global::Biome Biome {
      get { return result.Biome; }
      set { SetBiome(value); }
    }
    public Builder SetBiome(global::Biome value) {
      PrepareBuilder();
      result.hasBiome = true;
      result.biome_ = value;
      return this;
    }
    public Builder ClearBiome() {
      PrepareBuilder();
      result.hasBiome = false;
      result.biome_ = global::Biome.PYTHON;
      return this;
    }
  }
  static QuestProtocol() {
    object.ReferenceEquals(global::QuestProtobuf.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class StatusBlockProtocol : pb::GeneratedMessage<StatusBlockProtocol, StatusBlockProtocol.Builder> {
  private StatusBlockProtocol() { }
  private static readonly StatusBlockProtocol defaultInstance = new StatusBlockProtocol().MakeReadOnly();
  private static readonly string[] _statusBlockProtocolFieldNames = new string[] { "commands", "name", "statuses" };
  private static readonly uint[] _statusBlockProtocolFieldTags = new uint[] { 26, 10, 18 };
  public static StatusBlockProtocol DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override StatusBlockProtocol DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override StatusBlockProtocol ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::QuestProtobuf.internal__static_StatusBlockProtocol__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<StatusBlockProtocol, StatusBlockProtocol.Builder> InternalFieldAccessors {
    get { return global::QuestProtobuf.internal__static_StatusBlockProtocol__FieldAccessorTable; }
  }
  
  public const int NameFieldNumber = 1;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int StatusesFieldNumber = 2;
  private pbc::PopsicleList<global::StatusCheckableProtocol> statuses_ = new pbc::PopsicleList<global::StatusCheckableProtocol>();
  public scg::IList<global::StatusCheckableProtocol> StatusesList {
    get { return statuses_; }
  }
  public int StatusesCount {
    get { return statuses_.Count; }
  }
  public global::StatusCheckableProtocol GetStatuses(int index) {
    return statuses_[index];
  }
  
  public const int CommandsFieldNumber = 3;
  private pbc::PopsicleList<global::SpawnCommandProtocol> commands_ = new pbc::PopsicleList<global::SpawnCommandProtocol>();
  public scg::IList<global::SpawnCommandProtocol> CommandsList {
    get { return commands_; }
  }
  public int CommandsCount {
    get { return commands_.Count; }
  }
  public global::SpawnCommandProtocol GetCommands(int index) {
    return commands_[index];
  }
  
  public override bool IsInitialized {
    get {
      if (!hasName) return false;
      foreach (global::StatusCheckableProtocol element in StatusesList) {
        if (!element.IsInitialized) return false;
      }
      foreach (global::SpawnCommandProtocol element in CommandsList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _statusBlockProtocolFieldNames;
    if (hasName) {
      output.WriteString(1, field_names[1], Name);
    }
    if (statuses_.Count > 0) {
      output.WriteMessageArray(2, field_names[2], statuses_);
    }
    if (commands_.Count > 0) {
      output.WriteMessageArray(3, field_names[0], commands_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Name);
      }
      foreach (global::StatusCheckableProtocol element in StatusesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      foreach (global::SpawnCommandProtocol element in CommandsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static StatusBlockProtocol ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StatusBlockProtocol ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StatusBlockProtocol ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StatusBlockProtocol ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StatusBlockProtocol ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StatusBlockProtocol ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static StatusBlockProtocol ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static StatusBlockProtocol ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static StatusBlockProtocol ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StatusBlockProtocol ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private StatusBlockProtocol MakeReadOnly() {
    statuses_.MakeReadOnly();
    commands_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(StatusBlockProtocol prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<StatusBlockProtocol, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(StatusBlockProtocol cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private StatusBlockProtocol result;
    
    private StatusBlockProtocol PrepareBuilder() {
      if (resultIsReadOnly) {
        StatusBlockProtocol original = result;
        result = new StatusBlockProtocol();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override StatusBlockProtocol MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::StatusBlockProtocol.Descriptor; }
    }
    
    public override StatusBlockProtocol DefaultInstanceForType {
      get { return global::StatusBlockProtocol.DefaultInstance; }
    }
    
    public override StatusBlockProtocol BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is StatusBlockProtocol) {
        return MergeFrom((StatusBlockProtocol) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(StatusBlockProtocol other) {
      if (other == global::StatusBlockProtocol.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.statuses_.Count != 0) {
        result.statuses_.Add(other.statuses_);
      }
      if (other.commands_.Count != 0) {
        result.commands_.Add(other.commands_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_statusBlockProtocolFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _statusBlockProtocolFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.statuses_, global::StatusCheckableProtocol.DefaultInstance, extensionRegistry);
            break;
          }
          case 26: {
            input.ReadMessageArray(tag, field_name, result.commands_, global::SpawnCommandProtocol.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public pbc::IPopsicleList<global::StatusCheckableProtocol> StatusesList {
      get { return PrepareBuilder().statuses_; }
    }
    public int StatusesCount {
      get { return result.StatusesCount; }
    }
    public global::StatusCheckableProtocol GetStatuses(int index) {
      return result.GetStatuses(index);
    }
    public Builder SetStatuses(int index, global::StatusCheckableProtocol value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.statuses_[index] = value;
      return this;
    }
    public Builder SetStatuses(int index, global::StatusCheckableProtocol.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.statuses_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddStatuses(global::StatusCheckableProtocol value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.statuses_.Add(value);
      return this;
    }
    public Builder AddStatuses(global::StatusCheckableProtocol.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.statuses_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeStatuses(scg::IEnumerable<global::StatusCheckableProtocol> values) {
      PrepareBuilder();
      result.statuses_.Add(values);
      return this;
    }
    public Builder ClearStatuses() {
      PrepareBuilder();
      result.statuses_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<global::SpawnCommandProtocol> CommandsList {
      get { return PrepareBuilder().commands_; }
    }
    public int CommandsCount {
      get { return result.CommandsCount; }
    }
    public global::SpawnCommandProtocol GetCommands(int index) {
      return result.GetCommands(index);
    }
    public Builder SetCommands(int index, global::SpawnCommandProtocol value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.commands_[index] = value;
      return this;
    }
    public Builder SetCommands(int index, global::SpawnCommandProtocol.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.commands_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddCommands(global::SpawnCommandProtocol value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.commands_.Add(value);
      return this;
    }
    public Builder AddCommands(global::SpawnCommandProtocol.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.commands_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeCommands(scg::IEnumerable<global::SpawnCommandProtocol> values) {
      PrepareBuilder();
      result.commands_.Add(values);
      return this;
    }
    public Builder ClearCommands() {
      PrepareBuilder();
      result.commands_.Clear();
      return this;
    }
  }
  static StatusBlockProtocol() {
    object.ReferenceEquals(global::QuestProtobuf.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class SpawnCommandProtocol : pb::GeneratedMessage<SpawnCommandProtocol, SpawnCommandProtocol.Builder> {
  private SpawnCommandProtocol() { }
  private static readonly SpawnCommandProtocol defaultInstance = new SpawnCommandProtocol().MakeReadOnly();
  private static readonly string[] _spawnCommandProtocolFieldNames = new string[] { "enemy", "item", "range", "spawnArea", "spawnSpecification" };
  private static readonly uint[] _spawnCommandProtocolFieldTags = new uint[] { 50, 42, 24, 8, 16 };
  public static SpawnCommandProtocol DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override SpawnCommandProtocol DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override SpawnCommandProtocol ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::QuestProtobuf.internal__static_SpawnCommandProtocol__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<SpawnCommandProtocol, SpawnCommandProtocol.Builder> InternalFieldAccessors {
    get { return global::QuestProtobuf.internal__static_SpawnCommandProtocol__FieldAccessorTable; }
  }
  
  public const int SpawnAreaFieldNumber = 1;
  private bool hasSpawnArea;
  private global::MapType spawnArea_ = global::MapType.CITY;
  public bool HasSpawnArea {
    get { return hasSpawnArea; }
  }
  public global::MapType SpawnArea {
    get { return spawnArea_; }
  }
  
  public const int SpawnSpecificationFieldNumber = 2;
  private bool hasSpawnSpecification;
  private global::SpawnAreaTypeSpecification spawnSpecification_ = global::SpawnAreaTypeSpecification.LOCAL;
  public bool HasSpawnSpecification {
    get { return hasSpawnSpecification; }
  }
  public global::SpawnAreaTypeSpecification SpawnSpecification {
    get { return spawnSpecification_; }
  }
  
  public const int RangeFieldNumber = 3;
  private bool hasRange;
  private int range_;
  public bool HasRange {
    get { return hasRange; }
  }
  public int Range {
    get { return range_; }
  }
  
  public const int ItemFieldNumber = 5;
  private bool hasItem;
  private global::DirectObjectProtocol item_;
  public bool HasItem {
    get { return hasItem; }
  }
  public global::DirectObjectProtocol Item {
    get { return item_ ?? global::DirectObjectProtocol.DefaultInstance; }
  }
  
  public const int EnemyFieldNumber = 6;
  private bool hasEnemy;
  private global::DirectObjectProtocol enemy_;
  public bool HasEnemy {
    get { return hasEnemy; }
  }
  public global::DirectObjectProtocol Enemy {
    get { return enemy_ ?? global::DirectObjectProtocol.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasSpawnArea) return false;
      if (!hasSpawnSpecification) return false;
      if (!hasRange) return false;
      if (HasItem) {
        if (!Item.IsInitialized) return false;
      }
      if (HasEnemy) {
        if (!Enemy.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _spawnCommandProtocolFieldNames;
    if (hasSpawnArea) {
      output.WriteEnum(1, field_names[3], (int) SpawnArea, SpawnArea);
    }
    if (hasSpawnSpecification) {
      output.WriteEnum(2, field_names[4], (int) SpawnSpecification, SpawnSpecification);
    }
    if (hasRange) {
      output.WriteInt32(3, field_names[2], Range);
    }
    if (hasItem) {
      output.WriteMessage(5, field_names[1], Item);
    }
    if (hasEnemy) {
      output.WriteMessage(6, field_names[0], Enemy);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSpawnArea) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) SpawnArea);
      }
      if (hasSpawnSpecification) {
        size += pb::CodedOutputStream.ComputeEnumSize(2, (int) SpawnSpecification);
      }
      if (hasRange) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Range);
      }
      if (hasItem) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, Item);
      }
      if (hasEnemy) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, Enemy);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static SpawnCommandProtocol ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SpawnCommandProtocol ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SpawnCommandProtocol ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static SpawnCommandProtocol ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static SpawnCommandProtocol ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SpawnCommandProtocol ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static SpawnCommandProtocol ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static SpawnCommandProtocol ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static SpawnCommandProtocol ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static SpawnCommandProtocol ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private SpawnCommandProtocol MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(SpawnCommandProtocol prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<SpawnCommandProtocol, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(SpawnCommandProtocol cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private SpawnCommandProtocol result;
    
    private SpawnCommandProtocol PrepareBuilder() {
      if (resultIsReadOnly) {
        SpawnCommandProtocol original = result;
        result = new SpawnCommandProtocol();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override SpawnCommandProtocol MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::SpawnCommandProtocol.Descriptor; }
    }
    
    public override SpawnCommandProtocol DefaultInstanceForType {
      get { return global::SpawnCommandProtocol.DefaultInstance; }
    }
    
    public override SpawnCommandProtocol BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is SpawnCommandProtocol) {
        return MergeFrom((SpawnCommandProtocol) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(SpawnCommandProtocol other) {
      if (other == global::SpawnCommandProtocol.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasSpawnArea) {
        SpawnArea = other.SpawnArea;
      }
      if (other.HasSpawnSpecification) {
        SpawnSpecification = other.SpawnSpecification;
      }
      if (other.HasRange) {
        Range = other.Range;
      }
      if (other.HasItem) {
        MergeItem(other.Item);
      }
      if (other.HasEnemy) {
        MergeEnemy(other.Enemy);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_spawnCommandProtocolFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _spawnCommandProtocolFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            object unknown;
            if(input.ReadEnum(ref result.spawnArea_, out unknown)) {
              result.hasSpawnArea = true;
            } else if(unknown is int) {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              unknownFields.MergeVarintField(1, (ulong)(int)unknown);
            }
            break;
          }
          case 16: {
            object unknown;
            if(input.ReadEnum(ref result.spawnSpecification_, out unknown)) {
              result.hasSpawnSpecification = true;
            } else if(unknown is int) {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              unknownFields.MergeVarintField(2, (ulong)(int)unknown);
            }
            break;
          }
          case 24: {
            result.hasRange = input.ReadInt32(ref result.range_);
            break;
          }
          case 42: {
            global::DirectObjectProtocol.Builder subBuilder = global::DirectObjectProtocol.CreateBuilder();
            if (result.hasItem) {
              subBuilder.MergeFrom(Item);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Item = subBuilder.BuildPartial();
            break;
          }
          case 50: {
            global::DirectObjectProtocol.Builder subBuilder = global::DirectObjectProtocol.CreateBuilder();
            if (result.hasEnemy) {
              subBuilder.MergeFrom(Enemy);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Enemy = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasSpawnArea {
     get { return result.hasSpawnArea; }
    }
    public global::MapType SpawnArea {
      get { return result.SpawnArea; }
      set { SetSpawnArea(value); }
    }
    public Builder SetSpawnArea(global::MapType value) {
      PrepareBuilder();
      result.hasSpawnArea = true;
      result.spawnArea_ = value;
      return this;
    }
    public Builder ClearSpawnArea() {
      PrepareBuilder();
      result.hasSpawnArea = false;
      result.spawnArea_ = global::MapType.CITY;
      return this;
    }
    
    public bool HasSpawnSpecification {
     get { return result.hasSpawnSpecification; }
    }
    public global::SpawnAreaTypeSpecification SpawnSpecification {
      get { return result.SpawnSpecification; }
      set { SetSpawnSpecification(value); }
    }
    public Builder SetSpawnSpecification(global::SpawnAreaTypeSpecification value) {
      PrepareBuilder();
      result.hasSpawnSpecification = true;
      result.spawnSpecification_ = value;
      return this;
    }
    public Builder ClearSpawnSpecification() {
      PrepareBuilder();
      result.hasSpawnSpecification = false;
      result.spawnSpecification_ = global::SpawnAreaTypeSpecification.LOCAL;
      return this;
    }
    
    public bool HasRange {
      get { return result.hasRange; }
    }
    public int Range {
      get { return result.Range; }
      set { SetRange(value); }
    }
    public Builder SetRange(int value) {
      PrepareBuilder();
      result.hasRange = true;
      result.range_ = value;
      return this;
    }
    public Builder ClearRange() {
      PrepareBuilder();
      result.hasRange = false;
      result.range_ = 0;
      return this;
    }
    
    public bool HasItem {
     get { return result.hasItem; }
    }
    public global::DirectObjectProtocol Item {
      get { return result.Item; }
      set { SetItem(value); }
    }
    public Builder SetItem(global::DirectObjectProtocol value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasItem = true;
      result.item_ = value;
      return this;
    }
    public Builder SetItem(global::DirectObjectProtocol.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasItem = true;
      result.item_ = builderForValue.Build();
      return this;
    }
    public Builder MergeItem(global::DirectObjectProtocol value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasItem &&
          result.item_ != global::DirectObjectProtocol.DefaultInstance) {
          result.item_ = global::DirectObjectProtocol.CreateBuilder(result.item_).MergeFrom(value).BuildPartial();
      } else {
        result.item_ = value;
      }
      result.hasItem = true;
      return this;
    }
    public Builder ClearItem() {
      PrepareBuilder();
      result.hasItem = false;
      result.item_ = null;
      return this;
    }
    
    public bool HasEnemy {
     get { return result.hasEnemy; }
    }
    public global::DirectObjectProtocol Enemy {
      get { return result.Enemy; }
      set { SetEnemy(value); }
    }
    public Builder SetEnemy(global::DirectObjectProtocol value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasEnemy = true;
      result.enemy_ = value;
      return this;
    }
    public Builder SetEnemy(global::DirectObjectProtocol.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasEnemy = true;
      result.enemy_ = builderForValue.Build();
      return this;
    }
    public Builder MergeEnemy(global::DirectObjectProtocol value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasEnemy &&
          result.enemy_ != global::DirectObjectProtocol.DefaultInstance) {
          result.enemy_ = global::DirectObjectProtocol.CreateBuilder(result.enemy_).MergeFrom(value).BuildPartial();
      } else {
        result.enemy_ = value;
      }
      result.hasEnemy = true;
      return this;
    }
    public Builder ClearEnemy() {
      PrepareBuilder();
      result.hasEnemy = false;
      result.enemy_ = null;
      return this;
    }
  }
  static SpawnCommandProtocol() {
    object.ReferenceEquals(global::QuestProtobuf.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class StatusStepProtocol : pb::GeneratedMessage<StatusStepProtocol, StatusStepProtocol.Builder> {
  private StatusStepProtocol() { }
  private static readonly StatusStepProtocol defaultInstance = new StatusStepProtocol().MakeReadOnly();
  private static readonly string[] _statusStepProtocolFieldNames = new string[] { "commands", "description", "name", "statusesInStep" };
  private static readonly uint[] _statusStepProtocolFieldTags = new uint[] { 34, 18, 10, 26 };
  public static StatusStepProtocol DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override StatusStepProtocol DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override StatusStepProtocol ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::QuestProtobuf.internal__static_StatusStepProtocol__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<StatusStepProtocol, StatusStepProtocol.Builder> InternalFieldAccessors {
    get { return global::QuestProtobuf.internal__static_StatusStepProtocol__FieldAccessorTable; }
  }
  
  public const int NameFieldNumber = 1;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int DescriptionFieldNumber = 2;
  private bool hasDescription;
  private string description_ = "";
  public bool HasDescription {
    get { return hasDescription; }
  }
  public string Description {
    get { return description_; }
  }
  
  public const int StatusesInStepFieldNumber = 3;
  private pbc::PopsicleList<global::StatusCheckableProtocol> statusesInStep_ = new pbc::PopsicleList<global::StatusCheckableProtocol>();
  public scg::IList<global::StatusCheckableProtocol> StatusesInStepList {
    get { return statusesInStep_; }
  }
  public int StatusesInStepCount {
    get { return statusesInStep_.Count; }
  }
  public global::StatusCheckableProtocol GetStatusesInStep(int index) {
    return statusesInStep_[index];
  }
  
  public const int CommandsFieldNumber = 4;
  private pbc::PopsicleList<global::SpawnCommandProtocol> commands_ = new pbc::PopsicleList<global::SpawnCommandProtocol>();
  public scg::IList<global::SpawnCommandProtocol> CommandsList {
    get { return commands_; }
  }
  public int CommandsCount {
    get { return commands_.Count; }
  }
  public global::SpawnCommandProtocol GetCommands(int index) {
    return commands_[index];
  }
  
  public override bool IsInitialized {
    get {
      if (!hasName) return false;
      if (!hasDescription) return false;
      foreach (global::StatusCheckableProtocol element in StatusesInStepList) {
        if (!element.IsInitialized) return false;
      }
      foreach (global::SpawnCommandProtocol element in CommandsList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _statusStepProtocolFieldNames;
    if (hasName) {
      output.WriteString(1, field_names[2], Name);
    }
    if (hasDescription) {
      output.WriteString(2, field_names[1], Description);
    }
    if (statusesInStep_.Count > 0) {
      output.WriteMessageArray(3, field_names[3], statusesInStep_);
    }
    if (commands_.Count > 0) {
      output.WriteMessageArray(4, field_names[0], commands_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Name);
      }
      if (hasDescription) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Description);
      }
      foreach (global::StatusCheckableProtocol element in StatusesInStepList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      foreach (global::SpawnCommandProtocol element in CommandsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static StatusStepProtocol ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StatusStepProtocol ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StatusStepProtocol ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StatusStepProtocol ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StatusStepProtocol ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StatusStepProtocol ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static StatusStepProtocol ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static StatusStepProtocol ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static StatusStepProtocol ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StatusStepProtocol ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private StatusStepProtocol MakeReadOnly() {
    statusesInStep_.MakeReadOnly();
    commands_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(StatusStepProtocol prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<StatusStepProtocol, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(StatusStepProtocol cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private StatusStepProtocol result;
    
    private StatusStepProtocol PrepareBuilder() {
      if (resultIsReadOnly) {
        StatusStepProtocol original = result;
        result = new StatusStepProtocol();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override StatusStepProtocol MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::StatusStepProtocol.Descriptor; }
    }
    
    public override StatusStepProtocol DefaultInstanceForType {
      get { return global::StatusStepProtocol.DefaultInstance; }
    }
    
    public override StatusStepProtocol BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is StatusStepProtocol) {
        return MergeFrom((StatusStepProtocol) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(StatusStepProtocol other) {
      if (other == global::StatusStepProtocol.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasDescription) {
        Description = other.Description;
      }
      if (other.statusesInStep_.Count != 0) {
        result.statusesInStep_.Add(other.statusesInStep_);
      }
      if (other.commands_.Count != 0) {
        result.commands_.Add(other.commands_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_statusStepProtocolFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _statusStepProtocolFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 18: {
            result.hasDescription = input.ReadString(ref result.description_);
            break;
          }
          case 26: {
            input.ReadMessageArray(tag, field_name, result.statusesInStep_, global::StatusCheckableProtocol.DefaultInstance, extensionRegistry);
            break;
          }
          case 34: {
            input.ReadMessageArray(tag, field_name, result.commands_, global::SpawnCommandProtocol.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasDescription {
      get { return result.hasDescription; }
    }
    public string Description {
      get { return result.Description; }
      set { SetDescription(value); }
    }
    public Builder SetDescription(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasDescription = true;
      result.description_ = value;
      return this;
    }
    public Builder ClearDescription() {
      PrepareBuilder();
      result.hasDescription = false;
      result.description_ = "";
      return this;
    }
    
    public pbc::IPopsicleList<global::StatusCheckableProtocol> StatusesInStepList {
      get { return PrepareBuilder().statusesInStep_; }
    }
    public int StatusesInStepCount {
      get { return result.StatusesInStepCount; }
    }
    public global::StatusCheckableProtocol GetStatusesInStep(int index) {
      return result.GetStatusesInStep(index);
    }
    public Builder SetStatusesInStep(int index, global::StatusCheckableProtocol value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.statusesInStep_[index] = value;
      return this;
    }
    public Builder SetStatusesInStep(int index, global::StatusCheckableProtocol.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.statusesInStep_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddStatusesInStep(global::StatusCheckableProtocol value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.statusesInStep_.Add(value);
      return this;
    }
    public Builder AddStatusesInStep(global::StatusCheckableProtocol.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.statusesInStep_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeStatusesInStep(scg::IEnumerable<global::StatusCheckableProtocol> values) {
      PrepareBuilder();
      result.statusesInStep_.Add(values);
      return this;
    }
    public Builder ClearStatusesInStep() {
      PrepareBuilder();
      result.statusesInStep_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<global::SpawnCommandProtocol> CommandsList {
      get { return PrepareBuilder().commands_; }
    }
    public int CommandsCount {
      get { return result.CommandsCount; }
    }
    public global::SpawnCommandProtocol GetCommands(int index) {
      return result.GetCommands(index);
    }
    public Builder SetCommands(int index, global::SpawnCommandProtocol value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.commands_[index] = value;
      return this;
    }
    public Builder SetCommands(int index, global::SpawnCommandProtocol.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.commands_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddCommands(global::SpawnCommandProtocol value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.commands_.Add(value);
      return this;
    }
    public Builder AddCommands(global::SpawnCommandProtocol.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.commands_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeCommands(scg::IEnumerable<global::SpawnCommandProtocol> values) {
      PrepareBuilder();
      result.commands_.Add(values);
      return this;
    }
    public Builder ClearCommands() {
      PrepareBuilder();
      result.commands_.Clear();
      return this;
    }
  }
  static StatusStepProtocol() {
    object.ReferenceEquals(global::QuestProtobuf.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class StatusCheckableProtocol : pb::GeneratedMessage<StatusCheckableProtocol, StatusCheckableProtocol.Builder> {
  private StatusCheckableProtocol() { }
  private static readonly StatusCheckableProtocol defaultInstance = new StatusCheckableProtocol().MakeReadOnly();
  private static readonly string[] _statusCheckableProtocolFieldNames = new string[] { "action", "amount", "tier" };
  private static readonly uint[] _statusCheckableProtocolFieldTags = new uint[] { 10, 24, 18 };
  public static StatusCheckableProtocol DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override StatusCheckableProtocol DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override StatusCheckableProtocol ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::QuestProtobuf.internal__static_StatusCheckableProtocol__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<StatusCheckableProtocol, StatusCheckableProtocol.Builder> InternalFieldAccessors {
    get { return global::QuestProtobuf.internal__static_StatusCheckableProtocol__FieldAccessorTable; }
  }
  
  public const int ActionFieldNumber = 1;
  private bool hasAction;
  private global::ActionProtocol action_;
  public bool HasAction {
    get { return hasAction; }
  }
  public global::ActionProtocol Action {
    get { return action_ ?? global::ActionProtocol.DefaultInstance; }
  }
  
  public const int TierFieldNumber = 2;
  private bool hasTier;
  private global::TierProtocol tier_;
  public bool HasTier {
    get { return hasTier; }
  }
  public global::TierProtocol Tier {
    get { return tier_ ?? global::TierProtocol.DefaultInstance; }
  }
  
  public const int AmountFieldNumber = 3;
  private bool hasAmount;
  private int amount_;
  public bool HasAmount {
    get { return hasAmount; }
  }
  public int Amount {
    get { return amount_; }
  }
  
  public override bool IsInitialized {
    get {
      if (HasAction) {
        if (!Action.IsInitialized) return false;
      }
      if (HasTier) {
        if (!Tier.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _statusCheckableProtocolFieldNames;
    if (hasAction) {
      output.WriteMessage(1, field_names[0], Action);
    }
    if (hasTier) {
      output.WriteMessage(2, field_names[2], Tier);
    }
    if (hasAmount) {
      output.WriteInt32(3, field_names[1], Amount);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAction) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Action);
      }
      if (hasTier) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Tier);
      }
      if (hasAmount) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Amount);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static StatusCheckableProtocol ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StatusCheckableProtocol ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StatusCheckableProtocol ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static StatusCheckableProtocol ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static StatusCheckableProtocol ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StatusCheckableProtocol ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static StatusCheckableProtocol ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static StatusCheckableProtocol ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static StatusCheckableProtocol ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static StatusCheckableProtocol ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private StatusCheckableProtocol MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(StatusCheckableProtocol prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<StatusCheckableProtocol, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(StatusCheckableProtocol cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private StatusCheckableProtocol result;
    
    private StatusCheckableProtocol PrepareBuilder() {
      if (resultIsReadOnly) {
        StatusCheckableProtocol original = result;
        result = new StatusCheckableProtocol();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override StatusCheckableProtocol MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::StatusCheckableProtocol.Descriptor; }
    }
    
    public override StatusCheckableProtocol DefaultInstanceForType {
      get { return global::StatusCheckableProtocol.DefaultInstance; }
    }
    
    public override StatusCheckableProtocol BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is StatusCheckableProtocol) {
        return MergeFrom((StatusCheckableProtocol) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(StatusCheckableProtocol other) {
      if (other == global::StatusCheckableProtocol.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasAction) {
        MergeAction(other.Action);
      }
      if (other.HasTier) {
        MergeTier(other.Tier);
      }
      if (other.HasAmount) {
        Amount = other.Amount;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_statusCheckableProtocolFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _statusCheckableProtocolFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::ActionProtocol.Builder subBuilder = global::ActionProtocol.CreateBuilder();
            if (result.hasAction) {
              subBuilder.MergeFrom(Action);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Action = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            global::TierProtocol.Builder subBuilder = global::TierProtocol.CreateBuilder();
            if (result.hasTier) {
              subBuilder.MergeFrom(Tier);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Tier = subBuilder.BuildPartial();
            break;
          }
          case 24: {
            result.hasAmount = input.ReadInt32(ref result.amount_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasAction {
     get { return result.hasAction; }
    }
    public global::ActionProtocol Action {
      get { return result.Action; }
      set { SetAction(value); }
    }
    public Builder SetAction(global::ActionProtocol value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAction = true;
      result.action_ = value;
      return this;
    }
    public Builder SetAction(global::ActionProtocol.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasAction = true;
      result.action_ = builderForValue.Build();
      return this;
    }
    public Builder MergeAction(global::ActionProtocol value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasAction &&
          result.action_ != global::ActionProtocol.DefaultInstance) {
          result.action_ = global::ActionProtocol.CreateBuilder(result.action_).MergeFrom(value).BuildPartial();
      } else {
        result.action_ = value;
      }
      result.hasAction = true;
      return this;
    }
    public Builder ClearAction() {
      PrepareBuilder();
      result.hasAction = false;
      result.action_ = null;
      return this;
    }
    
    public bool HasTier {
     get { return result.hasTier; }
    }
    public global::TierProtocol Tier {
      get { return result.Tier; }
      set { SetTier(value); }
    }
    public Builder SetTier(global::TierProtocol value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasTier = true;
      result.tier_ = value;
      return this;
    }
    public Builder SetTier(global::TierProtocol.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasTier = true;
      result.tier_ = builderForValue.Build();
      return this;
    }
    public Builder MergeTier(global::TierProtocol value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasTier &&
          result.tier_ != global::TierProtocol.DefaultInstance) {
          result.tier_ = global::TierProtocol.CreateBuilder(result.tier_).MergeFrom(value).BuildPartial();
      } else {
        result.tier_ = value;
      }
      result.hasTier = true;
      return this;
    }
    public Builder ClearTier() {
      PrepareBuilder();
      result.hasTier = false;
      result.tier_ = null;
      return this;
    }
    
    public bool HasAmount {
      get { return result.hasAmount; }
    }
    public int Amount {
      get { return result.Amount; }
      set { SetAmount(value); }
    }
    public Builder SetAmount(int value) {
      PrepareBuilder();
      result.hasAmount = true;
      result.amount_ = value;
      return this;
    }
    public Builder ClearAmount() {
      PrepareBuilder();
      result.hasAmount = false;
      result.amount_ = 0;
      return this;
    }
  }
  static StatusCheckableProtocol() {
    object.ReferenceEquals(global::QuestProtobuf.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class TierProtocol : pb::GeneratedMessage<TierProtocol, TierProtocol.Builder> {
  private TierProtocol() { }
  private static readonly TierProtocol defaultInstance = new TierProtocol().MakeReadOnly();
  private static readonly string[] _tierProtocolFieldNames = new string[] { "tier" };
  private static readonly uint[] _tierProtocolFieldTags = new uint[] { 8 };
  public static TierProtocol DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override TierProtocol DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override TierProtocol ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::QuestProtobuf.internal__static_TierProtocol__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<TierProtocol, TierProtocol.Builder> InternalFieldAccessors {
    get { return global::QuestProtobuf.internal__static_TierProtocol__FieldAccessorTable; }
  }
  
  public const int TierFieldNumber = 1;
  private bool hasTier;
  private int tier_;
  public bool HasTier {
    get { return hasTier; }
  }
  public int Tier {
    get { return tier_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasTier) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _tierProtocolFieldNames;
    if (hasTier) {
      output.WriteInt32(1, field_names[0], Tier);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTier) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Tier);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static TierProtocol ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static TierProtocol ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static TierProtocol ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static TierProtocol ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static TierProtocol ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static TierProtocol ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static TierProtocol ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static TierProtocol ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static TierProtocol ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static TierProtocol ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private TierProtocol MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(TierProtocol prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<TierProtocol, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(TierProtocol cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private TierProtocol result;
    
    private TierProtocol PrepareBuilder() {
      if (resultIsReadOnly) {
        TierProtocol original = result;
        result = new TierProtocol();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override TierProtocol MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::TierProtocol.Descriptor; }
    }
    
    public override TierProtocol DefaultInstanceForType {
      get { return global::TierProtocol.DefaultInstance; }
    }
    
    public override TierProtocol BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is TierProtocol) {
        return MergeFrom((TierProtocol) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(TierProtocol other) {
      if (other == global::TierProtocol.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasTier) {
        Tier = other.Tier;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_tierProtocolFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _tierProtocolFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasTier = input.ReadInt32(ref result.tier_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasTier {
      get { return result.hasTier; }
    }
    public int Tier {
      get { return result.Tier; }
      set { SetTier(value); }
    }
    public Builder SetTier(int value) {
      PrepareBuilder();
      result.hasTier = true;
      result.tier_ = value;
      return this;
    }
    public Builder ClearTier() {
      PrepareBuilder();
      result.hasTier = false;
      result.tier_ = 0;
      return this;
    }
  }
  static TierProtocol() {
    object.ReferenceEquals(global::QuestProtobuf.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ActionProtocol : pb::GeneratedMessage<ActionProtocol, ActionProtocol.Builder> {
  private ActionProtocol() { }
  private static readonly ActionProtocol defaultInstance = new ActionProtocol().MakeReadOnly();
  private static readonly string[] _actionProtocolFieldNames = new string[] { "target", "type" };
  private static readonly uint[] _actionProtocolFieldTags = new uint[] { 18, 8 };
  public static ActionProtocol DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ActionProtocol DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ActionProtocol ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::QuestProtobuf.internal__static_ActionProtocol__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ActionProtocol, ActionProtocol.Builder> InternalFieldAccessors {
    get { return global::QuestProtobuf.internal__static_ActionProtocol__FieldAccessorTable; }
  }
  
  public const int TypeFieldNumber = 1;
  private bool hasType;
  private global::ActionType type_ = global::ActionType.KILL;
  public bool HasType {
    get { return hasType; }
  }
  public global::ActionType Type {
    get { return type_; }
  }
  
  public const int TargetFieldNumber = 2;
  private bool hasTarget;
  private global::DirectObjectProtocol target_;
  public bool HasTarget {
    get { return hasTarget; }
  }
  public global::DirectObjectProtocol Target {
    get { return target_ ?? global::DirectObjectProtocol.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasType) return false;
      if (HasTarget) {
        if (!Target.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _actionProtocolFieldNames;
    if (hasType) {
      output.WriteEnum(1, field_names[1], (int) Type, Type);
    }
    if (hasTarget) {
      output.WriteMessage(2, field_names[0], Target);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasType) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Type);
      }
      if (hasTarget) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Target);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static ActionProtocol ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ActionProtocol ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ActionProtocol ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ActionProtocol ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ActionProtocol ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ActionProtocol ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ActionProtocol ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ActionProtocol ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ActionProtocol ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ActionProtocol ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ActionProtocol MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ActionProtocol prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ActionProtocol, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ActionProtocol cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ActionProtocol result;
    
    private ActionProtocol PrepareBuilder() {
      if (resultIsReadOnly) {
        ActionProtocol original = result;
        result = new ActionProtocol();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ActionProtocol MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ActionProtocol.Descriptor; }
    }
    
    public override ActionProtocol DefaultInstanceForType {
      get { return global::ActionProtocol.DefaultInstance; }
    }
    
    public override ActionProtocol BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ActionProtocol) {
        return MergeFrom((ActionProtocol) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ActionProtocol other) {
      if (other == global::ActionProtocol.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasTarget) {
        MergeTarget(other.Target);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_actionProtocolFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _actionProtocolFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            object unknown;
            if(input.ReadEnum(ref result.type_, out unknown)) {
              result.hasType = true;
            } else if(unknown is int) {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              unknownFields.MergeVarintField(1, (ulong)(int)unknown);
            }
            break;
          }
          case 18: {
            global::DirectObjectProtocol.Builder subBuilder = global::DirectObjectProtocol.CreateBuilder();
            if (result.hasTarget) {
              subBuilder.MergeFrom(Target);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Target = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasType {
     get { return result.hasType; }
    }
    public global::ActionType Type {
      get { return result.Type; }
      set { SetType(value); }
    }
    public Builder SetType(global::ActionType value) {
      PrepareBuilder();
      result.hasType = true;
      result.type_ = value;
      return this;
    }
    public Builder ClearType() {
      PrepareBuilder();
      result.hasType = false;
      result.type_ = global::ActionType.KILL;
      return this;
    }
    
    public bool HasTarget {
     get { return result.hasTarget; }
    }
    public global::DirectObjectProtocol Target {
      get { return result.Target; }
      set { SetTarget(value); }
    }
    public Builder SetTarget(global::DirectObjectProtocol value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasTarget = true;
      result.target_ = value;
      return this;
    }
    public Builder SetTarget(global::DirectObjectProtocol.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasTarget = true;
      result.target_ = builderForValue.Build();
      return this;
    }
    public Builder MergeTarget(global::DirectObjectProtocol value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasTarget &&
          result.target_ != global::DirectObjectProtocol.DefaultInstance) {
          result.target_ = global::DirectObjectProtocol.CreateBuilder(result.target_).MergeFrom(value).BuildPartial();
      } else {
        result.target_ = value;
      }
      result.hasTarget = true;
      return this;
    }
    public Builder ClearTarget() {
      PrepareBuilder();
      result.hasTarget = false;
      result.target_ = null;
      return this;
    }
  }
  static ActionProtocol() {
    object.ReferenceEquals(global::QuestProtobuf.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class DirectObjectProtocol : pb::GeneratedMessage<DirectObjectProtocol, DirectObjectProtocol.Builder> {
  private DirectObjectProtocol() { }
  private static readonly DirectObjectProtocol defaultInstance = new DirectObjectProtocol().MakeReadOnly();
  private static readonly string[] _directObjectProtocolFieldNames = new string[] { "amount", "itemInformation", "map", "name", "type" };
  private static readonly uint[] _directObjectProtocolFieldTags = new uint[] { 32, 42, 26, 18, 10 };
  public static DirectObjectProtocol DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override DirectObjectProtocol DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override DirectObjectProtocol ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::QuestProtobuf.internal__static_DirectObjectProtocol__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<DirectObjectProtocol, DirectObjectProtocol.Builder> InternalFieldAccessors {
    get { return global::QuestProtobuf.internal__static_DirectObjectProtocol__FieldAccessorTable; }
  }
  
  public const int TypeFieldNumber = 1;
  private bool hasType;
  private string type_ = "";
  public bool HasType {
    get { return hasType; }
  }
  public string Type {
    get { return type_; }
  }
  
  public const int NameFieldNumber = 2;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int MapFieldNumber = 3;
  private bool hasMap;
  private global::MapProtocol map_;
  public bool HasMap {
    get { return hasMap; }
  }
  public global::MapProtocol Map {
    get { return map_ ?? global::MapProtocol.DefaultInstance; }
  }
  
  public const int AmountFieldNumber = 4;
  private bool hasAmount;
  private int amount_;
  public bool HasAmount {
    get { return hasAmount; }
  }
  public int Amount {
    get { return amount_; }
  }
  
  public const int ItemInformationFieldNumber = 5;
  private bool hasItemInformation;
  private global::ItemProtocol itemInformation_;
  public bool HasItemInformation {
    get { return hasItemInformation; }
  }
  public global::ItemProtocol ItemInformation {
    get { return itemInformation_ ?? global::ItemProtocol.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasName) return false;
      if (HasMap) {
        if (!Map.IsInitialized) return false;
      }
      if (HasItemInformation) {
        if (!ItemInformation.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _directObjectProtocolFieldNames;
    if (hasType) {
      output.WriteString(1, field_names[4], Type);
    }
    if (hasName) {
      output.WriteString(2, field_names[3], Name);
    }
    if (hasMap) {
      output.WriteMessage(3, field_names[2], Map);
    }
    if (hasAmount) {
      output.WriteInt32(4, field_names[0], Amount);
    }
    if (hasItemInformation) {
      output.WriteMessage(5, field_names[1], ItemInformation);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasType) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Type);
      }
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      if (hasMap) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Map);
      }
      if (hasAmount) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, Amount);
      }
      if (hasItemInformation) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, ItemInformation);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static DirectObjectProtocol ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static DirectObjectProtocol ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static DirectObjectProtocol ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static DirectObjectProtocol ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static DirectObjectProtocol ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static DirectObjectProtocol ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static DirectObjectProtocol ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static DirectObjectProtocol ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static DirectObjectProtocol ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static DirectObjectProtocol ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private DirectObjectProtocol MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(DirectObjectProtocol prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<DirectObjectProtocol, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(DirectObjectProtocol cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private DirectObjectProtocol result;
    
    private DirectObjectProtocol PrepareBuilder() {
      if (resultIsReadOnly) {
        DirectObjectProtocol original = result;
        result = new DirectObjectProtocol();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override DirectObjectProtocol MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::DirectObjectProtocol.Descriptor; }
    }
    
    public override DirectObjectProtocol DefaultInstanceForType {
      get { return global::DirectObjectProtocol.DefaultInstance; }
    }
    
    public override DirectObjectProtocol BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is DirectObjectProtocol) {
        return MergeFrom((DirectObjectProtocol) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(DirectObjectProtocol other) {
      if (other == global::DirectObjectProtocol.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasMap) {
        MergeMap(other.Map);
      }
      if (other.HasAmount) {
        Amount = other.Amount;
      }
      if (other.HasItemInformation) {
        MergeItemInformation(other.ItemInformation);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_directObjectProtocolFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _directObjectProtocolFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasType = input.ReadString(ref result.type_);
            break;
          }
          case 18: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 26: {
            global::MapProtocol.Builder subBuilder = global::MapProtocol.CreateBuilder();
            if (result.hasMap) {
              subBuilder.MergeFrom(Map);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Map = subBuilder.BuildPartial();
            break;
          }
          case 32: {
            result.hasAmount = input.ReadInt32(ref result.amount_);
            break;
          }
          case 42: {
            global::ItemProtocol.Builder subBuilder = global::ItemProtocol.CreateBuilder();
            if (result.hasItemInformation) {
              subBuilder.MergeFrom(ItemInformation);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ItemInformation = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasType {
      get { return result.hasType; }
    }
    public string Type {
      get { return result.Type; }
      set { SetType(value); }
    }
    public Builder SetType(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasType = true;
      result.type_ = value;
      return this;
    }
    public Builder ClearType() {
      PrepareBuilder();
      result.hasType = false;
      result.type_ = "";
      return this;
    }
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasMap {
     get { return result.hasMap; }
    }
    public global::MapProtocol Map {
      get { return result.Map; }
      set { SetMap(value); }
    }
    public Builder SetMap(global::MapProtocol value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasMap = true;
      result.map_ = value;
      return this;
    }
    public Builder SetMap(global::MapProtocol.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasMap = true;
      result.map_ = builderForValue.Build();
      return this;
    }
    public Builder MergeMap(global::MapProtocol value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasMap &&
          result.map_ != global::MapProtocol.DefaultInstance) {
          result.map_ = global::MapProtocol.CreateBuilder(result.map_).MergeFrom(value).BuildPartial();
      } else {
        result.map_ = value;
      }
      result.hasMap = true;
      return this;
    }
    public Builder ClearMap() {
      PrepareBuilder();
      result.hasMap = false;
      result.map_ = null;
      return this;
    }
    
    public bool HasAmount {
      get { return result.hasAmount; }
    }
    public int Amount {
      get { return result.Amount; }
      set { SetAmount(value); }
    }
    public Builder SetAmount(int value) {
      PrepareBuilder();
      result.hasAmount = true;
      result.amount_ = value;
      return this;
    }
    public Builder ClearAmount() {
      PrepareBuilder();
      result.hasAmount = false;
      result.amount_ = 0;
      return this;
    }
    
    public bool HasItemInformation {
     get { return result.hasItemInformation; }
    }
    public global::ItemProtocol ItemInformation {
      get { return result.ItemInformation; }
      set { SetItemInformation(value); }
    }
    public Builder SetItemInformation(global::ItemProtocol value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasItemInformation = true;
      result.itemInformation_ = value;
      return this;
    }
    public Builder SetItemInformation(global::ItemProtocol.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasItemInformation = true;
      result.itemInformation_ = builderForValue.Build();
      return this;
    }
    public Builder MergeItemInformation(global::ItemProtocol value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasItemInformation &&
          result.itemInformation_ != global::ItemProtocol.DefaultInstance) {
          result.itemInformation_ = global::ItemProtocol.CreateBuilder(result.itemInformation_).MergeFrom(value).BuildPartial();
      } else {
        result.itemInformation_ = value;
      }
      result.hasItemInformation = true;
      return this;
    }
    public Builder ClearItemInformation() {
      PrepareBuilder();
      result.hasItemInformation = false;
      result.itemInformation_ = null;
      return this;
    }
  }
  static DirectObjectProtocol() {
    object.ReferenceEquals(global::QuestProtobuf.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class MapProtocol : pb::GeneratedMessage<MapProtocol, MapProtocol.Builder> {
  private MapProtocol() { }
  private static readonly MapProtocol defaultInstance = new MapProtocol().MakeReadOnly();
  private static readonly string[] _mapProtocolFieldNames = new string[] { "generateIfNeeded", "range", "uid" };
  private static readonly uint[] _mapProtocolFieldTags = new uint[] { 16, 25, 8 };
  public static MapProtocol DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override MapProtocol DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override MapProtocol ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::QuestProtobuf.internal__static_MapProtocol__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<MapProtocol, MapProtocol.Builder> InternalFieldAccessors {
    get { return global::QuestProtobuf.internal__static_MapProtocol__FieldAccessorTable; }
  }
  
  public const int UidFieldNumber = 1;
  private bool hasUid;
  private long uid_;
  public bool HasUid {
    get { return hasUid; }
  }
  public long Uid {
    get { return uid_; }
  }
  
  public const int GenerateIfNeededFieldNumber = 2;
  private bool hasGenerateIfNeeded;
  private bool generateIfNeeded_;
  public bool HasGenerateIfNeeded {
    get { return hasGenerateIfNeeded; }
  }
  public bool GenerateIfNeeded {
    get { return generateIfNeeded_; }
  }
  
  public const int RangeFieldNumber = 3;
  private bool hasRange;
  private double range_;
  public bool HasRange {
    get { return hasRange; }
  }
  public double Range {
    get { return range_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasUid) return false;
      if (!hasGenerateIfNeeded) return false;
      if (!hasRange) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _mapProtocolFieldNames;
    if (hasUid) {
      output.WriteInt64(1, field_names[2], Uid);
    }
    if (hasGenerateIfNeeded) {
      output.WriteBool(2, field_names[0], GenerateIfNeeded);
    }
    if (hasRange) {
      output.WriteDouble(3, field_names[1], Range);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasUid) {
        size += pb::CodedOutputStream.ComputeInt64Size(1, Uid);
      }
      if (hasGenerateIfNeeded) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, GenerateIfNeeded);
      }
      if (hasRange) {
        size += pb::CodedOutputStream.ComputeDoubleSize(3, Range);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static MapProtocol ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MapProtocol ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MapProtocol ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static MapProtocol ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static MapProtocol ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MapProtocol ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static MapProtocol ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static MapProtocol ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static MapProtocol ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static MapProtocol ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private MapProtocol MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(MapProtocol prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<MapProtocol, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(MapProtocol cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private MapProtocol result;
    
    private MapProtocol PrepareBuilder() {
      if (resultIsReadOnly) {
        MapProtocol original = result;
        result = new MapProtocol();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override MapProtocol MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::MapProtocol.Descriptor; }
    }
    
    public override MapProtocol DefaultInstanceForType {
      get { return global::MapProtocol.DefaultInstance; }
    }
    
    public override MapProtocol BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is MapProtocol) {
        return MergeFrom((MapProtocol) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(MapProtocol other) {
      if (other == global::MapProtocol.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasGenerateIfNeeded) {
        GenerateIfNeeded = other.GenerateIfNeeded;
      }
      if (other.HasRange) {
        Range = other.Range;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_mapProtocolFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _mapProtocolFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasUid = input.ReadInt64(ref result.uid_);
            break;
          }
          case 16: {
            result.hasGenerateIfNeeded = input.ReadBool(ref result.generateIfNeeded_);
            break;
          }
          case 25: {
            result.hasRange = input.ReadDouble(ref result.range_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasUid {
      get { return result.hasUid; }
    }
    public long Uid {
      get { return result.Uid; }
      set { SetUid(value); }
    }
    public Builder SetUid(long value) {
      PrepareBuilder();
      result.hasUid = true;
      result.uid_ = value;
      return this;
    }
    public Builder ClearUid() {
      PrepareBuilder();
      result.hasUid = false;
      result.uid_ = 0L;
      return this;
    }
    
    public bool HasGenerateIfNeeded {
      get { return result.hasGenerateIfNeeded; }
    }
    public bool GenerateIfNeeded {
      get { return result.GenerateIfNeeded; }
      set { SetGenerateIfNeeded(value); }
    }
    public Builder SetGenerateIfNeeded(bool value) {
      PrepareBuilder();
      result.hasGenerateIfNeeded = true;
      result.generateIfNeeded_ = value;
      return this;
    }
    public Builder ClearGenerateIfNeeded() {
      PrepareBuilder();
      result.hasGenerateIfNeeded = false;
      result.generateIfNeeded_ = false;
      return this;
    }
    
    public bool HasRange {
      get { return result.hasRange; }
    }
    public double Range {
      get { return result.Range; }
      set { SetRange(value); }
    }
    public Builder SetRange(double value) {
      PrepareBuilder();
      result.hasRange = true;
      result.range_ = value;
      return this;
    }
    public Builder ClearRange() {
      PrepareBuilder();
      result.hasRange = false;
      result.range_ = 0D;
      return this;
    }
  }
  static MapProtocol() {
    object.ReferenceEquals(global::QuestProtobuf.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ItemProtocol : pb::GeneratedMessage<ItemProtocol, ItemProtocol.Builder> {
  private ItemProtocol() { }
  private static readonly ItemProtocol defaultInstance = new ItemProtocol().MakeReadOnly();
  private static readonly string[] _itemProtocolFieldNames = new string[] { "levelSpec", "version" };
  private static readonly uint[] _itemProtocolFieldTags = new uint[] { 16, 8 };
  public static ItemProtocol DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ItemProtocol DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ItemProtocol ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::QuestProtobuf.internal__static_ItemProtocol__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ItemProtocol, ItemProtocol.Builder> InternalFieldAccessors {
    get { return global::QuestProtobuf.internal__static_ItemProtocol__FieldAccessorTable; }
  }
  
  public const int VersionFieldNumber = 1;
  private bool hasVersion;
  private int version_;
  public bool HasVersion {
    get { return hasVersion; }
  }
  public int Version {
    get { return version_; }
  }
  
  public const int LevelSpecFieldNumber = 2;
  private bool hasLevelSpec;
  private global::LevelSpecification levelSpec_ = global::LevelSpecification.MINIMUM;
  public bool HasLevelSpec {
    get { return hasLevelSpec; }
  }
  public global::LevelSpecification LevelSpec {
    get { return levelSpec_; }
  }
  
  public override bool IsInitialized {
    get {
      if (!hasVersion) return false;
      if (!hasLevelSpec) return false;
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _itemProtocolFieldNames;
    if (hasVersion) {
      output.WriteInt32(1, field_names[1], Version);
    }
    if (hasLevelSpec) {
      output.WriteEnum(2, field_names[0], (int) LevelSpec, LevelSpec);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasVersion) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Version);
      }
      if (hasLevelSpec) {
        size += pb::CodedOutputStream.ComputeEnumSize(2, (int) LevelSpec);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static ItemProtocol ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ItemProtocol ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ItemProtocol ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ItemProtocol ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ItemProtocol ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ItemProtocol ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ItemProtocol ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ItemProtocol ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ItemProtocol ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ItemProtocol ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ItemProtocol MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ItemProtocol prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ItemProtocol, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ItemProtocol cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ItemProtocol result;
    
    private ItemProtocol PrepareBuilder() {
      if (resultIsReadOnly) {
        ItemProtocol original = result;
        result = new ItemProtocol();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ItemProtocol MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ItemProtocol.Descriptor; }
    }
    
    public override ItemProtocol DefaultInstanceForType {
      get { return global::ItemProtocol.DefaultInstance; }
    }
    
    public override ItemProtocol BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ItemProtocol) {
        return MergeFrom((ItemProtocol) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ItemProtocol other) {
      if (other == global::ItemProtocol.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasVersion) {
        Version = other.Version;
      }
      if (other.HasLevelSpec) {
        LevelSpec = other.LevelSpec;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_itemProtocolFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _itemProtocolFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasVersion = input.ReadInt32(ref result.version_);
            break;
          }
          case 16: {
            object unknown;
            if(input.ReadEnum(ref result.levelSpec_, out unknown)) {
              result.hasLevelSpec = true;
            } else if(unknown is int) {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              unknownFields.MergeVarintField(2, (ulong)(int)unknown);
            }
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasVersion {
      get { return result.hasVersion; }
    }
    public int Version {
      get { return result.Version; }
      set { SetVersion(value); }
    }
    public Builder SetVersion(int value) {
      PrepareBuilder();
      result.hasVersion = true;
      result.version_ = value;
      return this;
    }
    public Builder ClearVersion() {
      PrepareBuilder();
      result.hasVersion = false;
      result.version_ = 0;
      return this;
    }
    
    public bool HasLevelSpec {
     get { return result.hasLevelSpec; }
    }
    public global::LevelSpecification LevelSpec {
      get { return result.LevelSpec; }
      set { SetLevelSpec(value); }
    }
    public Builder SetLevelSpec(global::LevelSpecification value) {
      PrepareBuilder();
      result.hasLevelSpec = true;
      result.levelSpec_ = value;
      return this;
    }
    public Builder ClearLevelSpec() {
      PrepareBuilder();
      result.hasLevelSpec = false;
      result.levelSpec_ = global::LevelSpecification.MINIMUM;
      return this;
    }
  }
  static ItemProtocol() {
    object.ReferenceEquals(global::QuestProtobuf.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ConversationPackage : pb::GeneratedMessage<ConversationPackage, ConversationPackage.Builder> {
  private ConversationPackage() { }
  private static readonly ConversationPackage defaultInstance = new ConversationPackage().MakeReadOnly();
  private static readonly string[] _conversationPackageFieldNames = new string[] { "conversations" };
  private static readonly uint[] _conversationPackageFieldTags = new uint[] { 10 };
  public static ConversationPackage DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ConversationPackage DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ConversationPackage ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::QuestProtobuf.internal__static_ConversationPackage__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ConversationPackage, ConversationPackage.Builder> InternalFieldAccessors {
    get { return global::QuestProtobuf.internal__static_ConversationPackage__FieldAccessorTable; }
  }
  
  public const int ConversationsFieldNumber = 1;
  private pbc::PopsicleList<global::Conversation> conversations_ = new pbc::PopsicleList<global::Conversation>();
  public scg::IList<global::Conversation> ConversationsList {
    get { return conversations_; }
  }
  public int ConversationsCount {
    get { return conversations_.Count; }
  }
  public global::Conversation GetConversations(int index) {
    return conversations_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::Conversation element in ConversationsList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _conversationPackageFieldNames;
    if (conversations_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], conversations_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::Conversation element in ConversationsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static ConversationPackage ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ConversationPackage ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ConversationPackage ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ConversationPackage ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ConversationPackage ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ConversationPackage ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ConversationPackage ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ConversationPackage ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ConversationPackage ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ConversationPackage ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ConversationPackage MakeReadOnly() {
    conversations_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ConversationPackage prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ConversationPackage, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ConversationPackage cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ConversationPackage result;
    
    private ConversationPackage PrepareBuilder() {
      if (resultIsReadOnly) {
        ConversationPackage original = result;
        result = new ConversationPackage();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ConversationPackage MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ConversationPackage.Descriptor; }
    }
    
    public override ConversationPackage DefaultInstanceForType {
      get { return global::ConversationPackage.DefaultInstance; }
    }
    
    public override ConversationPackage BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ConversationPackage) {
        return MergeFrom((ConversationPackage) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ConversationPackage other) {
      if (other == global::ConversationPackage.DefaultInstance) return this;
      PrepareBuilder();
      if (other.conversations_.Count != 0) {
        result.conversations_.Add(other.conversations_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_conversationPackageFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _conversationPackageFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.conversations_, global::Conversation.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::Conversation> ConversationsList {
      get { return PrepareBuilder().conversations_; }
    }
    public int ConversationsCount {
      get { return result.ConversationsCount; }
    }
    public global::Conversation GetConversations(int index) {
      return result.GetConversations(index);
    }
    public Builder SetConversations(int index, global::Conversation value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.conversations_[index] = value;
      return this;
    }
    public Builder SetConversations(int index, global::Conversation.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.conversations_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddConversations(global::Conversation value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.conversations_.Add(value);
      return this;
    }
    public Builder AddConversations(global::Conversation.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.conversations_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeConversations(scg::IEnumerable<global::Conversation> values) {
      PrepareBuilder();
      result.conversations_.Add(values);
      return this;
    }
    public Builder ClearConversations() {
      PrepareBuilder();
      result.conversations_.Clear();
      return this;
    }
  }
  static ConversationPackage() {
    object.ReferenceEquals(global::QuestProtobuf.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Conversation : pb::GeneratedMessage<Conversation, Conversation.Builder> {
  private Conversation() { }
  private static readonly Conversation defaultInstance = new Conversation().MakeReadOnly();
  private static readonly string[] _conversationFieldNames = new string[] { "allNodes", "creator", "name" };
  private static readonly uint[] _conversationFieldTags = new uint[] { 10, 26, 18 };
  public static Conversation DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override Conversation DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override Conversation ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::QuestProtobuf.internal__static_Conversation__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<Conversation, Conversation.Builder> InternalFieldAccessors {
    get { return global::QuestProtobuf.internal__static_Conversation__FieldAccessorTable; }
  }
  
  public const int AllNodesFieldNumber = 1;
  private pbc::PopsicleList<global::ConversationNode> allNodes_ = new pbc::PopsicleList<global::ConversationNode>();
  public scg::IList<global::ConversationNode> AllNodesList {
    get { return allNodes_; }
  }
  public int AllNodesCount {
    get { return allNodes_.Count; }
  }
  public global::ConversationNode GetAllNodes(int index) {
    return allNodes_[index];
  }
  
  public const int NameFieldNumber = 2;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int CreatorFieldNumber = 3;
  private bool hasCreator;
  private string creator_ = "";
  public bool HasCreator {
    get { return hasCreator; }
  }
  public string Creator {
    get { return creator_; }
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::ConversationNode element in AllNodesList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _conversationFieldNames;
    if (allNodes_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], allNodes_);
    }
    if (hasName) {
      output.WriteString(2, field_names[2], Name);
    }
    if (hasCreator) {
      output.WriteString(3, field_names[1], Creator);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::ConversationNode element in AllNodesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      if (hasCreator) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Creator);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static Conversation ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Conversation ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Conversation ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Conversation ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Conversation ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Conversation ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static Conversation ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static Conversation ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static Conversation ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Conversation ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private Conversation MakeReadOnly() {
    allNodes_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(Conversation prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<Conversation, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(Conversation cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private Conversation result;
    
    private Conversation PrepareBuilder() {
      if (resultIsReadOnly) {
        Conversation original = result;
        result = new Conversation();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override Conversation MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::Conversation.Descriptor; }
    }
    
    public override Conversation DefaultInstanceForType {
      get { return global::Conversation.DefaultInstance; }
    }
    
    public override Conversation BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is Conversation) {
        return MergeFrom((Conversation) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(Conversation other) {
      if (other == global::Conversation.DefaultInstance) return this;
      PrepareBuilder();
      if (other.allNodes_.Count != 0) {
        result.allNodes_.Add(other.allNodes_);
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasCreator) {
        Creator = other.Creator;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_conversationFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _conversationFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.allNodes_, global::ConversationNode.DefaultInstance, extensionRegistry);
            break;
          }
          case 18: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 26: {
            result.hasCreator = input.ReadString(ref result.creator_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::ConversationNode> AllNodesList {
      get { return PrepareBuilder().allNodes_; }
    }
    public int AllNodesCount {
      get { return result.AllNodesCount; }
    }
    public global::ConversationNode GetAllNodes(int index) {
      return result.GetAllNodes(index);
    }
    public Builder SetAllNodes(int index, global::ConversationNode value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.allNodes_[index] = value;
      return this;
    }
    public Builder SetAllNodes(int index, global::ConversationNode.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.allNodes_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddAllNodes(global::ConversationNode value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.allNodes_.Add(value);
      return this;
    }
    public Builder AddAllNodes(global::ConversationNode.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.allNodes_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeAllNodes(scg::IEnumerable<global::ConversationNode> values) {
      PrepareBuilder();
      result.allNodes_.Add(values);
      return this;
    }
    public Builder ClearAllNodes() {
      PrepareBuilder();
      result.allNodes_.Clear();
      return this;
    }
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasCreator {
      get { return result.hasCreator; }
    }
    public string Creator {
      get { return result.Creator; }
      set { SetCreator(value); }
    }
    public Builder SetCreator(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCreator = true;
      result.creator_ = value;
      return this;
    }
    public Builder ClearCreator() {
      PrepareBuilder();
      result.hasCreator = false;
      result.creator_ = "";
      return this;
    }
  }
  static Conversation() {
    object.ReferenceEquals(global::QuestProtobuf.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ConversationNode : pb::GeneratedMessage<ConversationNode, ConversationNode.Builder> {
  private ConversationNode() { }
  private static readonly ConversationNode defaultInstance = new ConversationNode().MakeReadOnly();
  private static readonly string[] _conversationNodeFieldNames = new string[] { "X", "Y", "blocks", "connections", "name", "text", "uid" };
  private static readonly uint[] _conversationNodeFieldTags = new uint[] { 32, 40, 58, 50, 18, 10, 24 };
  public static ConversationNode DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ConversationNode DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ConversationNode ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::QuestProtobuf.internal__static_ConversationNode__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ConversationNode, ConversationNode.Builder> InternalFieldAccessors {
    get { return global::QuestProtobuf.internal__static_ConversationNode__FieldAccessorTable; }
  }
  
  public const int TextFieldNumber = 1;
  private bool hasText;
  private string text_ = "";
  public bool HasText {
    get { return hasText; }
  }
  public string Text {
    get { return text_; }
  }
  
  public const int NameFieldNumber = 2;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int UidFieldNumber = 3;
  private bool hasUid;
  private long uid_;
  public bool HasUid {
    get { return hasUid; }
  }
  public long Uid {
    get { return uid_; }
  }
  
  public const int XFieldNumber = 4;
  private bool hasX;
  private int x_;
  public bool HasX {
    get { return hasX; }
  }
  public int X {
    get { return x_; }
  }
  
  public const int YFieldNumber = 5;
  private bool hasY;
  private int y_;
  public bool HasY {
    get { return hasY; }
  }
  public int Y {
    get { return y_; }
  }
  
  public const int ConnectionsFieldNumber = 6;
  private pbc::PopsicleList<global::Connection> connections_ = new pbc::PopsicleList<global::Connection>();
  public scg::IList<global::Connection> ConnectionsList {
    get { return connections_; }
  }
  public int ConnectionsCount {
    get { return connections_.Count; }
  }
  public global::Connection GetConnections(int index) {
    return connections_[index];
  }
  
  public const int BlocksFieldNumber = 7;
  private pbc::PopsicleList<global::StatusBlockProtocol> blocks_ = new pbc::PopsicleList<global::StatusBlockProtocol>();
  public scg::IList<global::StatusBlockProtocol> BlocksList {
    get { return blocks_; }
  }
  public int BlocksCount {
    get { return blocks_.Count; }
  }
  public global::StatusBlockProtocol GetBlocks(int index) {
    return blocks_[index];
  }
  
  public override bool IsInitialized {
    get {
      if (!hasText) return false;
      if (!hasName) return false;
      if (!hasUid) return false;
      if (!hasX) return false;
      if (!hasY) return false;
      foreach (global::Connection element in ConnectionsList) {
        if (!element.IsInitialized) return false;
      }
      foreach (global::StatusBlockProtocol element in BlocksList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _conversationNodeFieldNames;
    if (hasText) {
      output.WriteString(1, field_names[5], Text);
    }
    if (hasName) {
      output.WriteString(2, field_names[4], Name);
    }
    if (hasUid) {
      output.WriteInt64(3, field_names[6], Uid);
    }
    if (hasX) {
      output.WriteInt32(4, field_names[0], X);
    }
    if (hasY) {
      output.WriteInt32(5, field_names[1], Y);
    }
    if (connections_.Count > 0) {
      output.WriteMessageArray(6, field_names[3], connections_);
    }
    if (blocks_.Count > 0) {
      output.WriteMessageArray(7, field_names[2], blocks_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasText) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Text);
      }
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      if (hasUid) {
        size += pb::CodedOutputStream.ComputeInt64Size(3, Uid);
      }
      if (hasX) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, X);
      }
      if (hasY) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, Y);
      }
      foreach (global::Connection element in ConnectionsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, element);
      }
      foreach (global::StatusBlockProtocol element in BlocksList) {
        size += pb::CodedOutputStream.ComputeMessageSize(7, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static ConversationNode ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ConversationNode ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ConversationNode ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ConversationNode ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ConversationNode ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ConversationNode ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ConversationNode ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ConversationNode ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ConversationNode ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ConversationNode ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ConversationNode MakeReadOnly() {
    connections_.MakeReadOnly();
    blocks_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ConversationNode prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ConversationNode, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ConversationNode cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ConversationNode result;
    
    private ConversationNode PrepareBuilder() {
      if (resultIsReadOnly) {
        ConversationNode original = result;
        result = new ConversationNode();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ConversationNode MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ConversationNode.Descriptor; }
    }
    
    public override ConversationNode DefaultInstanceForType {
      get { return global::ConversationNode.DefaultInstance; }
    }
    
    public override ConversationNode BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ConversationNode) {
        return MergeFrom((ConversationNode) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ConversationNode other) {
      if (other == global::ConversationNode.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasText) {
        Text = other.Text;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasUid) {
        Uid = other.Uid;
      }
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      if (other.connections_.Count != 0) {
        result.connections_.Add(other.connections_);
      }
      if (other.blocks_.Count != 0) {
        result.blocks_.Add(other.blocks_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_conversationNodeFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _conversationNodeFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasText = input.ReadString(ref result.text_);
            break;
          }
          case 18: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 24: {
            result.hasUid = input.ReadInt64(ref result.uid_);
            break;
          }
          case 32: {
            result.hasX = input.ReadInt32(ref result.x_);
            break;
          }
          case 40: {
            result.hasY = input.ReadInt32(ref result.y_);
            break;
          }
          case 50: {
            input.ReadMessageArray(tag, field_name, result.connections_, global::Connection.DefaultInstance, extensionRegistry);
            break;
          }
          case 58: {
            input.ReadMessageArray(tag, field_name, result.blocks_, global::StatusBlockProtocol.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasText {
      get { return result.hasText; }
    }
    public string Text {
      get { return result.Text; }
      set { SetText(value); }
    }
    public Builder SetText(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasText = true;
      result.text_ = value;
      return this;
    }
    public Builder ClearText() {
      PrepareBuilder();
      result.hasText = false;
      result.text_ = "";
      return this;
    }
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasUid {
      get { return result.hasUid; }
    }
    public long Uid {
      get { return result.Uid; }
      set { SetUid(value); }
    }
    public Builder SetUid(long value) {
      PrepareBuilder();
      result.hasUid = true;
      result.uid_ = value;
      return this;
    }
    public Builder ClearUid() {
      PrepareBuilder();
      result.hasUid = false;
      result.uid_ = 0L;
      return this;
    }
    
    public bool HasX {
      get { return result.hasX; }
    }
    public int X {
      get { return result.X; }
      set { SetX(value); }
    }
    public Builder SetX(int value) {
      PrepareBuilder();
      result.hasX = true;
      result.x_ = value;
      return this;
    }
    public Builder ClearX() {
      PrepareBuilder();
      result.hasX = false;
      result.x_ = 0;
      return this;
    }
    
    public bool HasY {
      get { return result.hasY; }
    }
    public int Y {
      get { return result.Y; }
      set { SetY(value); }
    }
    public Builder SetY(int value) {
      PrepareBuilder();
      result.hasY = true;
      result.y_ = value;
      return this;
    }
    public Builder ClearY() {
      PrepareBuilder();
      result.hasY = false;
      result.y_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<global::Connection> ConnectionsList {
      get { return PrepareBuilder().connections_; }
    }
    public int ConnectionsCount {
      get { return result.ConnectionsCount; }
    }
    public global::Connection GetConnections(int index) {
      return result.GetConnections(index);
    }
    public Builder SetConnections(int index, global::Connection value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.connections_[index] = value;
      return this;
    }
    public Builder SetConnections(int index, global::Connection.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.connections_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddConnections(global::Connection value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.connections_.Add(value);
      return this;
    }
    public Builder AddConnections(global::Connection.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.connections_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeConnections(scg::IEnumerable<global::Connection> values) {
      PrepareBuilder();
      result.connections_.Add(values);
      return this;
    }
    public Builder ClearConnections() {
      PrepareBuilder();
      result.connections_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<global::StatusBlockProtocol> BlocksList {
      get { return PrepareBuilder().blocks_; }
    }
    public int BlocksCount {
      get { return result.BlocksCount; }
    }
    public global::StatusBlockProtocol GetBlocks(int index) {
      return result.GetBlocks(index);
    }
    public Builder SetBlocks(int index, global::StatusBlockProtocol value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.blocks_[index] = value;
      return this;
    }
    public Builder SetBlocks(int index, global::StatusBlockProtocol.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.blocks_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddBlocks(global::StatusBlockProtocol value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.blocks_.Add(value);
      return this;
    }
    public Builder AddBlocks(global::StatusBlockProtocol.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.blocks_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeBlocks(scg::IEnumerable<global::StatusBlockProtocol> values) {
      PrepareBuilder();
      result.blocks_.Add(values);
      return this;
    }
    public Builder ClearBlocks() {
      PrepareBuilder();
      result.blocks_.Clear();
      return this;
    }
  }
  static ConversationNode() {
    object.ReferenceEquals(global::QuestProtobuf.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class Connection : pb::GeneratedMessage<Connection, Connection.Builder> {
  private Connection() { }
  private static readonly Connection defaultInstance = new Connection().MakeReadOnly();
  private static readonly string[] _connectionFieldNames = new string[] { "nodeId", "requirementSets", "text" };
  private static readonly uint[] _connectionFieldTags = new uint[] { 8, 26, 18 };
  public static Connection DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override Connection DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override Connection ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::QuestProtobuf.internal__static_Connection__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<Connection, Connection.Builder> InternalFieldAccessors {
    get { return global::QuestProtobuf.internal__static_Connection__FieldAccessorTable; }
  }
  
  public const int NodeIdFieldNumber = 1;
  private bool hasNodeId;
  private long nodeId_;
  public bool HasNodeId {
    get { return hasNodeId; }
  }
  public long NodeId {
    get { return nodeId_; }
  }
  
  public const int TextFieldNumber = 2;
  private bool hasText;
  private string text_ = "";
  public bool HasText {
    get { return hasText; }
  }
  public string Text {
    get { return text_; }
  }
  
  public const int RequirementSetsFieldNumber = 3;
  private pbc::PopsicleList<global::RequirementSet> requirementSets_ = new pbc::PopsicleList<global::RequirementSet>();
  public scg::IList<global::RequirementSet> RequirementSetsList {
    get { return requirementSets_; }
  }
  public int RequirementSetsCount {
    get { return requirementSets_.Count; }
  }
  public global::RequirementSet GetRequirementSets(int index) {
    return requirementSets_[index];
  }
  
  public override bool IsInitialized {
    get {
      if (!hasNodeId) return false;
      if (!hasText) return false;
      foreach (global::RequirementSet element in RequirementSetsList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _connectionFieldNames;
    if (hasNodeId) {
      output.WriteInt64(1, field_names[0], NodeId);
    }
    if (hasText) {
      output.WriteString(2, field_names[2], Text);
    }
    if (requirementSets_.Count > 0) {
      output.WriteMessageArray(3, field_names[1], requirementSets_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasNodeId) {
        size += pb::CodedOutputStream.ComputeInt64Size(1, NodeId);
      }
      if (hasText) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Text);
      }
      foreach (global::RequirementSet element in RequirementSetsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static Connection ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Connection ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Connection ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static Connection ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static Connection ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Connection ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static Connection ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static Connection ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static Connection ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static Connection ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private Connection MakeReadOnly() {
    requirementSets_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(Connection prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<Connection, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(Connection cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private Connection result;
    
    private Connection PrepareBuilder() {
      if (resultIsReadOnly) {
        Connection original = result;
        result = new Connection();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override Connection MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::Connection.Descriptor; }
    }
    
    public override Connection DefaultInstanceForType {
      get { return global::Connection.DefaultInstance; }
    }
    
    public override Connection BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is Connection) {
        return MergeFrom((Connection) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(Connection other) {
      if (other == global::Connection.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasNodeId) {
        NodeId = other.NodeId;
      }
      if (other.HasText) {
        Text = other.Text;
      }
      if (other.requirementSets_.Count != 0) {
        result.requirementSets_.Add(other.requirementSets_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_connectionFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _connectionFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasNodeId = input.ReadInt64(ref result.nodeId_);
            break;
          }
          case 18: {
            result.hasText = input.ReadString(ref result.text_);
            break;
          }
          case 26: {
            input.ReadMessageArray(tag, field_name, result.requirementSets_, global::RequirementSet.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasNodeId {
      get { return result.hasNodeId; }
    }
    public long NodeId {
      get { return result.NodeId; }
      set { SetNodeId(value); }
    }
    public Builder SetNodeId(long value) {
      PrepareBuilder();
      result.hasNodeId = true;
      result.nodeId_ = value;
      return this;
    }
    public Builder ClearNodeId() {
      PrepareBuilder();
      result.hasNodeId = false;
      result.nodeId_ = 0L;
      return this;
    }
    
    public bool HasText {
      get { return result.hasText; }
    }
    public string Text {
      get { return result.Text; }
      set { SetText(value); }
    }
    public Builder SetText(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasText = true;
      result.text_ = value;
      return this;
    }
    public Builder ClearText() {
      PrepareBuilder();
      result.hasText = false;
      result.text_ = "";
      return this;
    }
    
    public pbc::IPopsicleList<global::RequirementSet> RequirementSetsList {
      get { return PrepareBuilder().requirementSets_; }
    }
    public int RequirementSetsCount {
      get { return result.RequirementSetsCount; }
    }
    public global::RequirementSet GetRequirementSets(int index) {
      return result.GetRequirementSets(index);
    }
    public Builder SetRequirementSets(int index, global::RequirementSet value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.requirementSets_[index] = value;
      return this;
    }
    public Builder SetRequirementSets(int index, global::RequirementSet.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.requirementSets_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddRequirementSets(global::RequirementSet value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.requirementSets_.Add(value);
      return this;
    }
    public Builder AddRequirementSets(global::RequirementSet.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.requirementSets_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeRequirementSets(scg::IEnumerable<global::RequirementSet> values) {
      PrepareBuilder();
      result.requirementSets_.Add(values);
      return this;
    }
    public Builder ClearRequirementSets() {
      PrepareBuilder();
      result.requirementSets_.Clear();
      return this;
    }
  }
  static Connection() {
    object.ReferenceEquals(global::QuestProtobuf.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class RequirementSet : pb::GeneratedMessage<RequirementSet, RequirementSet.Builder> {
  private RequirementSet() { }
  private static readonly RequirementSet defaultInstance = new RequirementSet().MakeReadOnly();
  private static readonly string[] _requirementSetFieldNames = new string[] { "requirements" };
  private static readonly uint[] _requirementSetFieldTags = new uint[] { 10 };
  public static RequirementSet DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override RequirementSet DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override RequirementSet ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::QuestProtobuf.internal__static_RequirementSet__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<RequirementSet, RequirementSet.Builder> InternalFieldAccessors {
    get { return global::QuestProtobuf.internal__static_RequirementSet__FieldAccessorTable; }
  }
  
  public const int RequirementsFieldNumber = 1;
  private pbc::PopsicleList<global::StatusCheckableProtocol> requirements_ = new pbc::PopsicleList<global::StatusCheckableProtocol>();
  public scg::IList<global::StatusCheckableProtocol> RequirementsList {
    get { return requirements_; }
  }
  public int RequirementsCount {
    get { return requirements_.Count; }
  }
  public global::StatusCheckableProtocol GetRequirements(int index) {
    return requirements_[index];
  }
  
  public override bool IsInitialized {
    get {
      foreach (global::StatusCheckableProtocol element in RequirementsList) {
        if (!element.IsInitialized) return false;
      }
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _requirementSetFieldNames;
    if (requirements_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], requirements_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::StatusCheckableProtocol element in RequirementsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static RequirementSet ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static RequirementSet ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static RequirementSet ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static RequirementSet ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static RequirementSet ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static RequirementSet ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static RequirementSet ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static RequirementSet ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static RequirementSet ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static RequirementSet ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private RequirementSet MakeReadOnly() {
    requirements_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(RequirementSet prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<RequirementSet, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(RequirementSet cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private RequirementSet result;
    
    private RequirementSet PrepareBuilder() {
      if (resultIsReadOnly) {
        RequirementSet original = result;
        result = new RequirementSet();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override RequirementSet MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::RequirementSet.Descriptor; }
    }
    
    public override RequirementSet DefaultInstanceForType {
      get { return global::RequirementSet.DefaultInstance; }
    }
    
    public override RequirementSet BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is RequirementSet) {
        return MergeFrom((RequirementSet) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(RequirementSet other) {
      if (other == global::RequirementSet.DefaultInstance) return this;
      PrepareBuilder();
      if (other.requirements_.Count != 0) {
        result.requirements_.Add(other.requirements_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_requirementSetFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _requirementSetFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.requirements_, global::StatusCheckableProtocol.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::StatusCheckableProtocol> RequirementsList {
      get { return PrepareBuilder().requirements_; }
    }
    public int RequirementsCount {
      get { return result.RequirementsCount; }
    }
    public global::StatusCheckableProtocol GetRequirements(int index) {
      return result.GetRequirements(index);
    }
    public Builder SetRequirements(int index, global::StatusCheckableProtocol value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.requirements_[index] = value;
      return this;
    }
    public Builder SetRequirements(int index, global::StatusCheckableProtocol.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.requirements_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddRequirements(global::StatusCheckableProtocol value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.requirements_.Add(value);
      return this;
    }
    public Builder AddRequirements(global::StatusCheckableProtocol.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.requirements_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeRequirements(scg::IEnumerable<global::StatusCheckableProtocol> values) {
      PrepareBuilder();
      result.requirements_.Add(values);
      return this;
    }
    public Builder ClearRequirements() {
      PrepareBuilder();
      result.requirements_.Clear();
      return this;
    }
  }
  static RequirementSet() {
    object.ReferenceEquals(global::QuestProtobuf.Descriptor, null);
  }
}

#endregion


#endregion Designer generated code
